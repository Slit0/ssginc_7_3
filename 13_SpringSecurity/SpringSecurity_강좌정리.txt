
SpringSecurity 강좌 정리


  1) 개요

    - 사용자의 인증(Authentication) 과 권한( Authorization )에 활용하는 
      Spring 의 서브 프로젝트임.

     Authentication(인증): id/pw 이용해서 회원임을 확인하는 작업.
     Authorization(권한) : 인증후  접근 가능한 자원을 구분하는 작업.

    
    - SpringBoot3 에서는 Spring security 6.X 지원함.


   
   2) 실습1
     
     - 강사가 제공해준 프로젝트 파일을 다운받고 압축 풀기
     - C:\springboot3_study\sts-4.27.0.RELEASE\workspace 에 붙여넣기
     - import > maven > Existing Maven Project 선택
     > Root Directory > workspace 에 있는 boot3.2.8_SpringSecurity01_제공파일 선택 > finish 


   3) 실습2- 의존성 추가

      - pom.xml
       <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

     - 의존성 추가후 실행했을 때 상황

       가. /home 요청했을 때  자동으로 login 화면이 보여짐. ( 인증작업을 하기 위해서 )
          자동으로 /logout 기능도 제공됨.

       나. 사용자명과 비번 입력

         사용자명: user
	 비번:   c3991d3d-8bd5-4ee3-8a29-8d8e34f18828       <=== console에서 제공됨. 실행할때마다 매번 새로운 값이 제공됨.
	                                                       암호화 되어 있음.(필수)
							       세션(HttpSession) 기반.

	 사용자명과 비번을 임의로 지정 가능
	 # application.properties
          spring.security.user.name=user
	  spring.security.user.password=1234


       다. 정확한 사용자명과 비번을 입력하면 	 /home 요청이 됨.						       
						
							   
   3) 실습3- 회원가입 + 반드시 비번 암호화(*****************)

       가. member 테이블

          use testdb;

	  create table member(	
	     userid varchar(255) primary key,
	     passwd varchar(255) not null,
	     username varchar(255) not null
	  );

       나. DB 연동 위한 의존성 설정
           
	   <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-validation</artifactId>
	</dependency>		
	<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>3.0.3</version>
	</dependency>
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
	</dependency>
         
	다. application.properties 에 DB 연동 설정

		  
	# DB 연동
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/shop
	spring.datasource.username=shop
	spring.datasource.password=shop
	# DeptMapper 등록
	mybatis.mapper-locations=com/exam/config/*Mapper.xml
	# DTO 별칭
	mybatis.type-aliases-package=com.exam.dto

	#  SQL의 컬럼명: target_date   ,  DTO 변수명: targetDate  인 경우
	#  별칭 또는 resultMap 으로 명시적으로 설정해서 사용했음.
	#  이 작업을 자동으로 할 수 있다.
	mybatis.configuration.map-underscore-to-camel-case=true

	라. MemberController/MemberDTO/MemberService/MemberServiceImpl/MemberMapper.java/MemberMapper.xml


	 -  작성후에 

	    http://localhost:8090/app/signup 
	    또는
	    http://localhost:8090/app/home 

	    요청하면 Spring Security에 의해서 인증하도록 하기 위해서 
	    http://localhost:8090/app/login 리다이렉트되어 로그인 화면이 나온다.

	    즉 Spring Security 는 인증되지 않으면 어떠한 자원도 접근이 불가능하도록 처리한다.

	    인증후에는 인증된 세션정보가 웹브라우저에 남아있기 때문에 다른 자원을 접근할 수 있게된다.


         
	 - 회원가입시 비번은 반드시 암호화해야 된다. (***************************)

	  
		//비번 암호화 (필수*******************************)
		String pw = dto.getPasswd(); //암호화 안된 pw: 1234
		String encodedPW = new BCryptPasswordEncoder().encode(pw);
		
		logger.info("LOGGER: pw: {}" , pw);
		logger.info("LOGGER: encodedPW: {}" , encodedPW);
		
		dto.setPasswd(encodedPW);

//////////////////////////////////////////////////////////////////////////////////////////////////////

    4) 사용자가 만든 로그인 화면 사용하기

       - LoginController.java
	 =>   @GetMapping(value={"/login"})
		public String showHomePage() {
			return "loginForm";
		}
        ==> @PostMapping 구현 안함.
	    실제 로그인 체크 기능은 따로 구현함( implments AuthenticationProvider )

       - loginForm.jsp /include/loginForm.jsp

       - 반드시 method="post" 로 요청해야 된다.

     
    5) SecurityFilterChain 작성
    https://docs.spring.io/spring-security/site/docs/6.2.8/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#authorizeHttpRequests(org.springframework.security.config.Customizer)

      웹브라우저 ---필터1-->필터2-->필터3---> Controller

       - /home /signup 요청시 /login 리다이렉트됨.
         그런데 인증이 필요없는 요청은 제외시켜야 됨.
       - CSRF 비활성 ( 도메인간 요청 위조 )
       https://docs.spring.io/spring-security/reference/6.1/features/exploits/csrf.html
         ==> POST(저장)/PUT(수정)는 DB에 영향이 미침.
	 ==> Spring Security는 기본적으로 CSRF 방지기능이 활성화되어 있음.
       
       - 사용자가 만든 로그인화면 정보를 알려줌.
         예> LoginController에서 @GetMapping(value={"/login"}) 정보
	    loginForm.jsp의 <form action="auth"> 정보
	    loginForm.jsp의 name="userid" 와 name="passwd" 정보

       - 성공시 리다이렉트 화면 정보
       - 실패시 리다이렉트 화면 정보

       - 로그아웃 설정
         ==> 어떤 요청으로 로그아웃 할 건지 지정 가능 예> http://~/logout
	 ==> 로그아웃이 성공시 리다이렉트 화면 정보