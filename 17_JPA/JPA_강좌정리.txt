JPA 강좌정리

1. JPA

   SpringBoot2.X ( Java Persistence API)
   SpringBoot3.X ( Jakarta Persistence API)


2. JPA 등장배경
 
   가. 이전에는 SQL 중심 개발
      - 테이블에 컬럼이 추가되면 자바의 DTO에 변수가 됨.

   나. 객체(클래스)와 SQL 패러다임 불일치

      객체: 상속, 다형성, 은닉화 .....

      SQL: 상속,다형성,은닉화 지원안됨.

   다. 탐색이 자유롭지 못함.

    SQL문: A테이블 ---> B테이블 ---> C테이블

    객체:  A클래스 <----> B클래스 <---> C클래스
          B b         C c          B b
	              A a

3. JPA 와 Hibernate 관계
 
     JPA ( 스펙, 인터페이스 )
      |
   Hibernate ( 구현체, 클래스 )

   https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html

///////////////////////////////////////////////////////////////////////////////////////////

4. 환경설정

  1) 의존성

      	<dependency>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
	<dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>8.0.33</version>
        </dependency>
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	</dependency>

  2) appplication.properties 설정

        logging.level.root=info
	logging.level.com.exam==info
	logging.level.org.springframework=info

	server.port=8090
	server.servlet.context-path=/app

	# MySQL 연동
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/testdb2
	spring.datasource.username=root
	spring.datasource.password=1234


	# JPA
	# JPA가 자동으로 생성하는 SQL문 보기
	logging.level.org.hibernate.SQL=trace
	# 위의 SQL문을 보기 좋게 보기
	spring.jpa.properties.hibernate.format_sql=true
	logging.level.org.hibernate.type=info

	# 자동으로 테이블 생성( create: drop+create )
	# @Entity 지정된 클래스에 해당하는 테이블을 자동생성
	spring.jpa.hibernate.ddl-auto=create  

	# 자동으로 생성된 SQL문에서 사용되는 파라미터 보기
	logging.level.org.hibernate.orm.jdbc.bind=trace

	# 트랜잭션 처리후에 Connection 사용하고 pool에 반환여부( 기본값은 true이고 반환안함 )
	spring.jpa.open-in-view=false

	# JPA 버전이 낮은 경우에 지정했음. 실제 접속하는 DB용 SQL문 작성위한 정보임.
	#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
	  
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher
	spring.mvc.format.date=yyyy-MM-dd

5. 엔티티 (entity)

  1) @Entity 어노테이션
    
     - DB의 table 과 맵핑역할.
  
  2) @Id 
    - DB의 table의 pk 맵핑여할.

    예>
        자바(객체)                               DB 
      --------------------------           --------------------------        
        @Entity                   
        public class Member{                member 테이블

	    @Id
	    @GeneratedValue
	    Long id;                        id 컬럼 (pk), auto_increment 기능
	    Strng name;                     name 컬럼
	
	}

6. 외부파일이용해서 데이터 저장하기

   1) 작업순서

    가. @Entity 로 지정한 엔티티 작성

      => 실행결과는 엔티티에 해당되는 테이블이 작성됨.


    나. src/main/resources/data.sql 작성

       - 반드시 data.sql 파일명임.
       - 이 파일에 테이블에 저장할 insert 문 작성

	# data.sql
        insert into member(id, name) values (1000,'홍길동');
	insert into member(id, name) values (1001,'이순신');
	insert into member(id, name) values (1002,'유관순');
	commit;

    다. data.sql 실행 활성화 작업

       # @Entity 보다 먼저 data.sql이 실행되기 때문에 defer 시킴.
       spring.jpa.defer-datasource-initialization=true
       # always는 프로그램실행시 매번 실행.
       spring.sql.init.mode=always|never
     

7. 외부파일이용해서 테이블생성 및 데이터 저장하기

   1) 작업순서

    가. @Entity 로 지정한 엔티티 작성

      =>  @Entity로 테이블생성 기능 비활성화

      spring.jpa.hibernate.ddl-auto=none

    나. src/main/resources/schema.sql 작성 
       src/main/resources/data.sql 작성 

       - 반드시 schema.sql 과 data.sql 파일명임.
       - 이 파일에 테이블에 저장할 insert 문 작성
	
	# schema.sql
	drop table if exists member;
	create table member
	( id bigint primary key auto_increment,
	  name varchar(255)
	);

	# data.sql
        insert into member(id, name) values (1000,'홍길동');
	insert into member(id, name) values (1001,'이순신');
	insert into member(id, name) values (1002,'유관순');
	commit;

    다. schema.sql 과  data.sql 실행 활성화 작업

       spring.jpa.hibernate.ddl-auto=none
       # @Entity 보다 먼저 data.sql이 실행되기 때문에 defer 시킴.
       spring.jpa.defer-datasource-initialization=true
       # always는 프로그램실행시 매번 실행.
       spring.sql.init.mode=always
     

8. 외부파일이용해서 테이블생성 및 데이터 저장하기 ( 저장위치 및 파일명 마음대로 )

    1) src/main/resouces/sql 폴더에 저장

         table.sql
	 insert.sql

    2) 경로 설정
	
	# classpath는 기본적으로 *.class 파일이 있는 경로 의미하고
	  기본적으로 src/main/java 와 src/main/resource는 알고 있음.

       spring.sql.init.schema-locations=classpath*:sql/table.sql
       spring.sql.init.data-locations=classpath*:sql/insert.sql

//////////////////////////////////////////////////////////////////////////
9. 객체와 테이블 맵핑

  @Entity : JPA 가 관리하는 객체로서 DB 의 테이블과 맵핑됨
  @Id     : DB의 테이블의 PK와 맵핑됨.
  @GeneratedValue: DB의 auto_increment 맵핑
  @Table(테이블명) : 기본적으로 DB이 테이블명은 클래스명으로 생성됨.
                   @Table 사용하면 지정된 테이블명으로 생성됨.


   예> 
        @Entity
	@Table(name = "TB_MEMBER")
	public class Member2 {

		@Id // pk 역할
		Long id;
		
		String name;

	}


//////////////////////////////////////////////////////////////////////////
10. 테이블 자동 생성

create:        drop 하고 create 함
create-drop:   create 동일. 종료할 때 drop
update:        변경사항만 반영
validate:      엔티티와 테이블간 잘 맵핑되었는지만 확인
none:          사용안함

spring.jpa.hibernate.ddl-auto=create  


==> 기본적으로 처음 create 지정하고 이후에는 none 지정해서 테이블과 저장된 데이터를 유지시킴.

//////////////////////////////////////////////////////////////////////////
11. 변수(필드)와 컬럼 맵핑

   - @Column(옵션)
   - 옵션기능 컬럼명지정, null허용여부, String인 경우 length 등 지정가능.

   예> 
       @Column(name="username")
       String name;

  - enum 타입은 @Enumerated(EnumType.STRING)  // EnumType.ORDINAL(수치로 관리)

  - 기본적으로 엔티티내의 모든 변수는 컬럼으로 만들어짐.
    이때 컬럼으로 만드는 작업에서 제외시킬 수 있음.( @Transient 지정 )

  - 주의할점
    
    만약 변수명이 카멜표기법으로 되어있으면 자동으로 생성되는 컬럼명은 _(스네이크표기법)로 생성된다.
    예> createDate       ---> create_date
       lastModifiedDate  --> last_modified_date 

    _(스네이크표기법) 자동방지 기능
    spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl



//////////////////////////////////////////////////////////////////////////
12. 영속성 관리

  1) 영속성객체
    - @Entity 지정한 클래스 의미.
    - 영속성객체(엔티티)관리는 EntityManager 하고 
      EntityManager는 EntityManagerFactory에서 만들어짐.

  2) 데이터 CRUD 의미

     # JPA 미사용시	

	 개발자  ---------------------------------> 테이블
		      sql문 직접 전송

     # JAP 사용시		
                           엔티티컨텍스트(컨테이너)           DB
      개발자  ---------------> 엔티티  ------------------> 테이블
                                       sql문 자동생성

    데이터 생성? 엔티티 생성 의미
    데이터 삭제? 엔티티 삭제 의미
    데이터 수정? 엔티티 수정 의미
    데이터 조회? 엔티티 조회 의미

    반드시 트랜잭션 범위내에서 작업을 해야 된다. (*************************)

  
   3) 4가지 영속성 상태

    가. 비영속 상태
      예> 엔티티 생성
        Member m = new Member();

    나. 영속 상태 (*****)
      - 엔티티 컨텍스트내에 존재하는 상태 의미.
      예> tx.persist(); // 저장
         tx.find()     // 조회

    다. 준영속 상태
      - 엔티티 컨텍스트에는 없으나 삭제되지 않음. 
        관리되지도 않음

     예> detach()

    라. 삭제 상태
     - 엔티티 컨텍스트에서 삭제

     예> remove()



13. 데이터 저장

   - 개념: 엔티티 생성 의미


   - 아키텍쳐


   개발자                           엔티티 컨텍스트                            DB
   ----------------------------------------------------------------------
1) 비영속 상태
  Member m 
  = new Member(1000,홍);
                                 3) 영속상태          5) insert 문 실행
		-------------->   Member(1000,홍) --------------------->   1000/홍 레코드가 생성됨.
		2) persist(m)                    

		
                4) commit()                          
		
  
 13. 데이터 저장2

   - 기본적으로 엔티티의 변수에 값을 설정하지 않으면 null 값이 저장된다.
     null 값 대신에 기본값을 설정할  수 있다.

   - @DynamicInsert + @ColumnDefault(기본값)  
    
     기본값 표현식:  "'기본값'" 

    
   예>
       @Entity
	@DynamicInsert
	public class Person {

		@Id // pk 역할
		@GeneratedValue   // auto_increment 기능
		Long id;
		
		@ColumnDefault(value = "'이순신'")
		String name;

		@ColumnDefault(value = "'10'")
		Integer age;
		
	}


14. 데이터 조회

   - 개념: 엔티티 조회 의미


   - 아키텍쳐
    실습전에 spring.jpa.hibernate.ddl-auto=none 설정하자. 이유는 새로운 테이블 생성방지.


    개발자                           엔티티 컨텍스트                            DB
   ----------------------------------------------------------------------
                                                                         1 홍길동 20
									 2 이순신 10
 
                 2)엔티티컨텍스트에서 1L 찾음.
		   만약 없으면 select 문 실행
  1)find(1L) ------------------------>


                                     <----------------------------------------
				             3) select(1L)

                                 //4) 영속상태인 영속객체
			         Person(1L,홍길동,20)
 <--------------------------------
     5) Person(1L,홍길동,20) 반환

 
 6) find(1L)       7)엔티티컨텍스트에서 1L 찾음.
                     찾으면 바로 리턴 ( 캐시 기능 지원 )
 --------------------------------->
  <--------------------------------
     8) Person(1L,홍길동,20) 반환

  
 예> 
    //엔티티 조회
		Person p = em.find(Person.class, 1L); // 엔티티 컨텍스트에 없기 때문에 select문이 발생됨.
		log.info("1. 1L 조회:{}", p);
		
		Person p2 = em.find(Person.class, 1L); // 엔티티 컨텍스트에 있기 때문에 캐시로 처리
		log.info("2. 1L 조회:{}", p2);
		
		
		Person p3 = em.find(Person.class, 2L); // 엔티티 컨텍스트에 없기 때문에 select문이 발생됨.
		log.info("3. 2L 조회:{}", p3);



15. 데이터 수정

   - 개념: 엔티티 수정 의미


   - 아키텍쳐
    실습전에 spring.jpa.hibernate.ddl-auto=create 설정하자. 이유는 새로운 테이블 생성 실습.


    개발자                           엔티티 컨텍스트                            DB
   ----------------------------------------------------------------------
                                                                         1 홍길동 20
									 2 이순신 10

1)홍길동->유관순 변경   2)엔티티컨테스트에서 찾음.
                     없으면 select문
  find(1L)   ------------------------>

                                            <-------------------------------
					         3)select문 실행
					
				    4)영속상태인  영속객체
				    Person(1L,홍길동,20)
      <----------------------------
           5) Person(1L,홍길동,20) 응답

6)이름변경                             7)영속객체도 변경
 p.setUsername("유관순") ------------>Person(1L,유관순,20)                    1 홍길동 20

                                             9) 영속객체와 실제DB비교한후 동기화처리
					      즉 update문 실행
  8) commit()호출  --------------------------------------------------------> 
									   10)최종적으로 DB변경
                                                                           1 유관순 20 

 ==> 현재상황은 username만 변경했음에도 불구하고 update문을 보면 age까지 수정됨.

     실행결과:
            update
		person 
	    set
		age=?,
		name=? 
	    where
		id=?

 ==> 모두 컬럼이 아니고 수정된 컬럼만 update 시키자 ( @DynamicUpdate )

     @DynamicUpdate
     public class Person {

    실행결과:
       update
        person 
    set
        name=? 
    where
        id=?