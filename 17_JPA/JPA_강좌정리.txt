JPA 강좌정리

1. JPA

   SpringBoot2.X ( Java Persistence API)
   SpringBoot3.X ( Jakarta Persistence API)


2. JPA 등장배경
 
   가. 이전에는 SQL 중심 개발
      - 테이블에 컬럼이 추가되면 자바의 DTO에 변수가 됨.

   나. 객체(클래스)와 SQL 패러다임 불일치

      객체: 상속, 다형성, 은닉화 .....

      SQL: 상속,다형성,은닉화 지원안됨.

   다. 탐색이 자유롭지 못함.

    SQL문: A테이블 ---> B테이블 ---> C테이블

    객체:  A클래스 <----> B클래스 <---> C클래스
          B b         C c          B b
	              A a

3. JPA 와 Hibernate 관계
 
     JPA ( 스펙, 인터페이스 )
      |
   Hibernate ( 구현체, 클래스 )

   https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html

///////////////////////////////////////////////////////////////////////////////////////////

4. 환경설정

  1) 의존성

      	<dependency>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
	<dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>8.0.33</version>
        </dependency>
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	</dependency>

  2) appplication.properties 설정

        logging.level.root=info
	logging.level.com.exam==info
	logging.level.org.springframework=info

	server.port=8090
	server.servlet.context-path=/app

	# MySQL 연동
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/testdb2
	spring.datasource.username=root
	spring.datasource.password=1234


	# JPA
	# JPA가 자동으로 생성하는 SQL문 보기
	logging.level.org.hibernate.SQL=trace
	# 위의 SQL문을 보기 좋게 보기
	spring.jpa.properties.hibernate.format_sql=true
	logging.level.org.hibernate.type=info

	# 자동으로 테이블 생성( create: drop+create )
	# @Entity 지정된 클래스에 해당하는 테이블을 자동생성
	spring.jpa.hibernate.ddl-auto=create  

	# 자동으로 생성된 SQL문에서 사용되는 파라미터 보기
	logging.level.org.hibernate.orm.jdbc.bind=trace

	# 트랜잭션 처리후에 Connection 사용하고 pool에 반환여부( 기본값은 true이고 반환안함 )
	spring.jpa.open-in-view=false

	# JPA 버전이 낮은 경우에 지정했음. 실제 접속하는 DB용 SQL문 작성위한 정보임.
	#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
	  
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher
	spring.mvc.format.date=yyyy-MM-dd

5. 엔티티 (entity)

  1) @Entity 어노테이션
    
     - DB의 table 과 맵핑역할.
  
  2) @Id 
    - DB의 table의 pk 맵핑여할.

    예>
        자바(객체)                               DB 
      --------------------------           --------------------------        
        @Entity                   
        public class Member{                member 테이블

	    @Id
	    @GeneratedValue
	    Long id;                        id 컬럼 (pk), auto_increment 기능
	    Strng name;                     name 컬럼
	
	}

6. 외부파일이용해서 데이터 저장하기

   1) 작업순서

    가. @Entity 로 지정한 엔티티 작성

      => 실행결과는 엔티티에 해당되는 테이블이 작성됨.


    나. src/main/resources/data.sql 작성

       - 반드시 data.sql 파일명임.
       - 이 파일에 테이블에 저장할 insert 문 작성

	# data.sql
        insert into member(id, name) values (1000,'홍길동');
	insert into member(id, name) values (1001,'이순신');
	insert into member(id, name) values (1002,'유관순');
	commit;

    다. data.sql 실행 활성화 작업

       # @Entity 보다 먼저 data.sql이 실행되기 때문에 defer 시킴.
       spring.jpa.defer-datasource-initialization=true
       # always는 프로그램실행시 매번 실행.
       spring.sql.init.mode=always|never
     

7. 외부파일이용해서 테이블생성 및 데이터 저장하기

   1) 작업순서

    가. @Entity 로 지정한 엔티티 작성

      =>  @Entity로 테이블생성 기능 비활성화

      spring.jpa.hibernate.ddl-auto=none

    나. src/main/resources/schema.sql 작성 
       src/main/resources/data.sql 작성 

       - 반드시 schema.sql 과 data.sql 파일명임.
       - 이 파일에 테이블에 저장할 insert 문 작성
	
	# schema.sql
	drop table if exists member;
	create table member
	( id bigint primary key auto_increment,
	  name varchar(255)
	);

	# data.sql
        insert into member(id, name) values (1000,'홍길동');
	insert into member(id, name) values (1001,'이순신');
	insert into member(id, name) values (1002,'유관순');
	commit;

    다. schema.sql 과  data.sql 실행 활성화 작업

       spring.jpa.hibernate.ddl-auto=none
       # @Entity 보다 먼저 data.sql이 실행되기 때문에 defer 시킴.
       spring.jpa.defer-datasource-initialization=true
       # always는 프로그램실행시 매번 실행.
       spring.sql.init.mode=always
     

8. 외부파일이용해서 테이블생성 및 데이터 저장하기 ( 저장위치 및 파일명 마음대로 )

    1) src/main/resouces/sql 폴더에 저장

         table.sql
	 insert.sql

    2) 경로 설정
	
	# classpath는 기본적으로 *.class 파일이 있는 경로 의미하고
	  기본적으로 src/main/java 와 src/main/resource는 알고 있음.

       spring.sql.init.schema-locations=classpath*:sql/table.sql
       spring.sql.init.data-locations=classpath*:sql/insert.sql

//////////////////////////////////////////////////////////////////////////
9. 객체와 테이블 맵핑

  @Entity : JPA 가 관리하는 객체로서 DB 의 테이블과 맵핑됨
  @Id     : DB의 테이블의 PK와 맵핑됨.
  @GeneratedValue: DB의 auto_increment 맵핑
  @Table(테이블명) : 기본적으로 DB이 테이블명은 클래스명으로 생성됨.
                   @Table 사용하면 지정된 테이블명으로 생성됨.


   예> 
        @Entity
	@Table(name = "TB_MEMBER")
	public class Member2 {

		@Id // pk 역할
		Long id;
		
		String name;

	}





