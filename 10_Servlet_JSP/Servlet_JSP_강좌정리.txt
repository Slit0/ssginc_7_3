
Servlet/JSP 강좌정리

1.  자바 개발 플랫폼 3가지
 
  1) Java SE ( Java Standard Edition)
      - 자바 spec.
      - 환경구축방법: JDK 17 설치
      - 개발프로그램 형태: 비웹 환경의 로컬로 실행되는 프로그램 개발이 가능.

  2) Java EE ( Java Enterprise Edition )
     
      - Servlet/JSP spec. ( spec는 인터페이스 라고 생각하자 )
        실제로 Servlet/JSP spec를 구현한 구현체는 Tomcat 서버가 제공하는 구현체를 사용할 것이다.

	  예>    오라클(Servlet/JSP spec 제공: 인터페이스)
	              |
	     Tomcat서버       Resin서버   ... 
            (Servlet/JSP spec를 구현함. .jar 형태로 제공)
      
      - jsp-api.jar 와 servlet-api.jar 가 제공됨.
      - 개발프로그램 형태: 웹 어플리케이션 개발이 가능.

  3) Java ME ( Java Micro Edition )
      - 개발프로그램 형태:  휴대용 장치에서 실행되는 개발이 가능.
     

2. 환경설정

  1) Java SE 환경 구축: JDK 17 설치

     - JDK 설치후 2개의 환경변수 설정
      JAVA_HOME=C:\Program Files\Java\jdk-17  <=== JDK의 홈디렉터리 경로 설정
      PATH=%JAVA_HOME%\bin;기본PATH                                   <=== 윈도우의 프로그램에 명령어 경로 설정
           C:\Program Files\Java\jdk-17\bin;기본PATH   
  
  2) Eclipse 설치
     - http://www.eclipse.org
     - JDK 17 지원여부 확인 필수.
     - eclipse-jee-2024-06-R-win32-x86_64.zip
       설치는 압축풀면 됨.
  
  3) Tomcat 서버 ( Tomcat 컨테이너 )
    
     - http://jakarta.apache.org 
     - JDK 17 버전을 지원하는 Tomcat 10 다운로드.
     - jsp-api.jar 와 servlet-api.jar 가 제공됨.
       ( Servlet 6.0 and Pages 3.1 )
     - apache-tomcat-10.1.28.zip
       설치는 압축풀면 됨.

     - 기본 port 번호: 8080  ( 만약 Oracle DB 설치하면 내부적으로 tomcat을 설치함(8080) )

    * tomcat9 vs tomcat10
 
       tomcat9: JDK11까지만 지원됨.
                패키지명은 javax.servlet 로 시작됨.
		패키지 관리를 Oracle로 했음.

       tomcat10: JDK17부터 지원됨.
                패키지명은 jakarta.servlet 로 시작됨.
                패키지 관리를 Oracle 아닌 Apache에서 관리함.
                
             서블릿관련 API 문서
	     https://tomcat.apache.org/tomcat-10.1-doc/servletapi/index.html

     - 필요시 환경변수 설정가능

       CATALINA_HOME=C:\servlet_study\apache-tomcat-10.1.28  <== bin 디렉터리 전까지
       


3. eclipse 와 Tomcat 연동

 1) eclipse 실행
   - C:\servlet_study\eclipse 에 workspace 작성
   - C:\servlet_study\eclipse\workspace 경로를 작업디렉터리로 지정
   - Java EE 퍼스펙티브 선택 ( 기본 )
   - 한글인코딩 설정
      a. window > preference > general > workspace 선택하고 text file encoding 값을 utf-8 로 설정 (기본)
      b. window > preference > web > html,css,jsp 선택하고 Encoding 값을 utf-8 로 설정 (기본)

   - JDK 17로 변경
 
      window > preference > java > compiler > 17 로 변경   
      window > preference > java > installed JRES >  기존 jre 체크된 것은 삭제하고 
                                                     우리 환경에 맞는 C:\Program Files\Java\jdk-17 선택.
     

  2) eclipse와 tomcat 연동 (*****************)

     - 교안 13 페이지 참조.



4. 프로젝트 생성

   - File > New > Dynamic Web Project 선택.  ( 프로젝트명: HelloTest )
   - Web Module 에서 출력된 내용은 다음과 같다.

     1) Context Root ( 논리적인 이름 )
       - 기본값은 프로젝트명으로 되어있음. ( 언제든지 변경 가능 )
       - 웹브라우저에서 요청시 사용됨.


           http://localhost:8090/컨텍스트명

	   예> http://localhost:8090/a
 

         컨텍스트명(논리적인경로       webapps안의 실제폴더(물리적인 경로, 웹어플리케이션)
        --------               -----------------------
          docs                   docs        <== http://localhost:8090/docs/index.html
	 examples		 examples     <== http://localhost:8090/examples/index.html
	    /			 ROOT        <== http://localhost:8090/index.jsp
	                                         http://localhost:8090/ 
						 ( servers > web.xml >  <welcome-file-list> 태그안에
						   메인 홈 페이지에 해당하는 파일명이 설정되어있음.
						   이 파일명은 url에 지정하지 않아도 자동으로 찾음 )

	   a                     HelloTest  <== http://localhost:8090/a

      - 용도: 실제 tomcat의 배포경로(depoy path)인 webapps 에 만들어지는 물리적인 폴더인 웹어플리케이션을
             찾을때 사용하는 논리적인 이름을 context라고 부른다.

      - 변경방법
        이클립스 servers 탭 > tomcat 서버 클릭 > module > edit > Path 에  context명 수정( 반드시  / 로 시작)

   2) Content Directory

      - 개발자가 만든 소스가 저장되는 eclipse 디렉터리이다.


   
   3) web.xml
    
     - 배치 지시자 ( deployment descriptor )라고 부르고
       생성된 웹 어플리케이션(HelloTest)의 전반적인 설정정보 담당하는 역할.
       (예>서블릿 맵핑, welcome file list, .. )

     * 웹 어플리케이션 설정 정보를 등록하는 방법 2가지
      
       가. web.xml ( 기본 )
         - Spring framework에서도 xml 이용해서 환경정보를 설정한다.

       나. 어노테이션 ( @ 으로 시작 )
         예> @WebServlet()
	     ....



5. eclipse 에서 생성된 웹 어플리케이션 디렉터리 구조

    HelloTest
      Java Resource
          src/main/java  <== 소스파일( java ) 저장
	  libraries
	     JRE System Library <== JDK 라이브러리
	     Server Runtime     <== jsp-api.jar 와 servlet-api.jar

      src
         main
	     java   <== 소스파일( java ) 저장

	     webapp <== 웹 관련 파일(html,jsp,css,js,img등)이 이클립스에 저장하는 디렉터리이다.
	       
	        WEB-INF <== 대문자로 지정, 웹 어플리케이션에서는 필수.
		            WEB-INF 폴더내에 저장된 파일은 웹 브라우저에서(외부) 접근이 불가 ( 보안 이슈 )
			    
		    lib  <== 외부에서 가져와서 사용하는 라이브러리(.jar) 등록 폴더.
		           나중에 mybatis.jar 와 mysql-connector.jar 2개의 jar 파일을 저장할 예정임.

		    web.xml  <== 웹 어플리케이션(HelloTest)의 전반적인 설정정보 담당.

	        *.html 
		*.jsp  <== jsp 파일
		*.css
		*.js
		image


  6. tomcat 의 배포된 디렉터리 구조 (*******************)
 
     tomcat/webapps   <==== 배포경로 ( deploy path )

                  HelloTest  <== 웹 어플리케이션 (물리적인 디렉터리 )
                       META-INF
		       WEB-INF (필수 )
		           classes <== *.java에 대한 *.class 파일들이 저장
			   lib     <== *.jar 저장 
			   web.xml <== 설정 정보 저장
			   
		       main.jsp
		       css
		       js
		       image



 7. 서버에 작성 가능한 3가지 컴포넌트 


    클라이언트              요청          서버(tomcat: 8090)
   (웹브라우저)  ----------------------->  
                                       1) html (정적 컴포넌트)
                                          src/main/webapp 에 저장
				       2) jsp  (동적 컴포넌트)
				          src/main/webapp 에 저장
				       3) 서블릿 (동적 컴포넌트)
				          src/main/java 에 저장

	      <---------------------
	                 응답 (html)

 8. 3가지 컴포넌트 웹 브라우저에서 요청하는 URL

   문법: 
         http://서버IP:port번호/컨텍스트명/자원(html/JSP/Servlet)


    1) 정적 컴포넌트 ( html ) - 디렉터리 없는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/html자원




    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                          main.html
           a. http://localhost:8090/컨텍스트명/main.html
	   ----------------------->  
	                             b. main.html 검색
				       만약 없으면 404 에러 발생
				       있으면 다운로드 해줌
           <----------------------
	    c. main.html 다운로드

   d. main.html
    랜더링

    1) 정적 컴포넌트 ( html ) - 디렉터리 있는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/디렉터리명/html자원


    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                          html/main.html
           a. http://localhost:8090/컨텍스트명/html/main.html
	   ----------------------->  
	                             b. main.html 검색
				       만약 없으면 404 에러 발생
				       있으면 다운로드 해줌
           <----------------------
	    c. main.html 다운로드

   d. main.html
    랜더링


    2) JSP 요청 ( 동적 컴포넌트 ) - 디렉터리 없는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/jsp자원

    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                           main.jsp

           a. http://localhost:8090/컨텍스트명/main.jsp
	   ----------------------->  
	                              b. main.jsp 검색
				       만약 없으면 404 에러 발생
				       있으면 3단계 실행됨 (**********************)
				   확인방법: C:\servlet_study\apache-tomcat-10.1.28\work\컨텍스트명폴더
				   
				         가. 변환단계
					   main.jsp ------> main_jsp.java

					 나. 컴파일 단계
					   main_jsp.java --> main_jsp.class

					 다. 실행 단계
					  main_jsp.class ==>  html로 결과가 나옴.

	   <----------------------
	    c.  html 다운로드
				 
 d. html 랜더링					 

			
 9. 서블릿 ( servlet )
 
   1. 서블릿 특징
     - *.java 로 작성됨.
     - 저장위치는 이클립스의 src/main/java 에 저장되고
       반드시 패키지를 사용해야 된다.
     - main 메서드가 없음. 즉 시작점이 없다.
       이유는 사용자가 요청하는 컴포넌트가 시작점 역할을 한다.

     - 직접 new 하지 않음. Tomcat 컨테이너가 필요한 시점에 생성(new) ~  소멸까지 해줌.
      즉 Tomcat 컨테이너가 서블릿/JSP 동적 컴포넌트를 관리해 줌.

     - 실행결과는 html로 나옴.
     - Servlet 6.0 버전은 Tomcat 10 이상 필요하고 패키지명은 javax가 아닌 jakarta 패키지로 시작된다.
     - Tomcat10 의 servlet-api.jar 에 포함된 패키지를 사용해서 서블릿을 구현할 수 있다.
     - 참조할 API 문서는 https://tomcat.apache.org/tomcat-10.1-doc/servletapi/index.html 이다.

   2. 구현 방법

     1) 패키지로 작성 
     2) extends HttpServlet  ( jakarta.servlet.http 패키지, 추상클래스 )

 ////////////////////////////////////////////////////////////////////////////////////////
         * 계층구조 ( 외우기 ************************* )


	  Servlet(인터페이스)    ,  ServletConfig(인터페이스)
		 |
	         |
             GenericServlet(추상 클래스)
                 |
	     HttpServlet(추상 클래스)
                 |
	   사용자정의 서블릿


     Servlet(인터페이스): 
       ==>  jakarta.servlet 패키지
            init(ServletConfig config)  : 서블릿 생성시 자동으로 호출 콜백
            destory():서블릿 삭제시 자동으로 호출 콜백
	    service(ServletRequest req, ServletResponse res): 서블릿이 해야되는 실제 작업 정의하는 메서드.
            getServletConfig(): ServletConfig 인터페이스 반환하는 메서드
 
     ServletConfig(인터페이스)
       ==>  jakarta.servlet 패키지
            getInitParameter(String key|name): 문자열로 값을 반환
            getInitParameterNames():  name(key)값만 반환, Enumeration 반환 ( Iterator 비슷한 기능)
            getServletContext(): ServletContext 타입 반환  (***************)

	    최종적으로 사용자가 만든 서블릿에서 ServletContext를 얻는 방법은 다음과 같아.
	   예> ServletContext sc = getServletContext(); (*********************)

     ServletContext(인터페이스)
      ==> jakarta.servlet 패키지
          addFilter(), createFilter()
	  addServlet(), createServlet()
	  setAttribute(name,value), getAttribute(name), getAttributeNames(), removeAttribute(name)
	  getContextPath()
          getInitParameter(String key|name): 문자열로 값을 반환
          getInitParameterNames():  name(key)값만 반환, Enumeration 반환 ( Iterator 비슷한 기능)
	  ..

     GenericServlet(추상 클래스)
      ==> jakarta.servlet 패키지
          init()
          log(String message)

     HttpServlet(추상 클래스)
      ==> jakarta.servlet.http 패키지
          doGet(HttpServletRequest req, HttpServletResponse resp): 기본, 클라이언트에서 get 방식 요청시 처리하는 메서드
          doPost(HttpServletRequest req, HttpServletResponse resp): 클라이언트에서 post 방식 요청시 처리하는 메서드
	  doDelete(..), doPut(..)
	
	 => method 불일치 예> get요청 ---> doPost 처리하고자 하면 405 에러 발생됨.


     사용자정의 서블릿
     ==>  위에서 살펴봤던 메서드를 그냥 사용 및 재정의 할 수 있다.
 
   3) doGet(기본) 또는 doPost 인 서비스 메서드를 반드시 재정의 해야 된다.

    예>  package com.servlet;

        public class MyServlet extends HttpServlet{
	 public void doGet(HttpServletRequest req, HttpServletResponse resp){
                 //실제 코드 작업
	 }
	}

         HttpServletRequest API (인터페이스)
	  ==> 요청관련 작업 담당
              getParameter(String name) <=== ?name=value&name2=value2 
              getParameterValues(String name) <== String [] 반환,  checkbox에 주로 사용
              getParameterNames() <==  name값들만 반환
              setAttribute(name,value), getAttribute(name), getAttributeNames(), removeAttribute(name)
              getRequestDispatcher(String path) <== 지정된 path로 요청함. JS의 location.href 비슷한 기능. 
	                                            forward 방법으로 부른다.
	      getCookies() <=== Cookie[] 반환,  쿠키 정보를 얻음.
              getSession() <=== HttpSession 반환, 세션 정보를 얻음.
              getHeader(name) <== header 값 조회


         HttpServletResponse API (인터페이스)
          ==> 응답관련 작업 담당
	      addCookie(Cookie c) <=== 쿠키정보를 웹브라우저에 추가하는 메서드
	      sendRedirect(String location) <== 지정된 location로 요청함. JS의 location.href 비슷한 기능. 
	                                          redirect 방법으로 부른다.

              setContentType(String type) <== MIME타입이라고 부름. 
	                                      서버가 클라이언트에게 전달할 데이터타입을 의미함.
					      예>text/html
	      getWriter() < === PrintWriter 타입 반환.
	                        PrintWriter 의 print(값) 이용해서 웹브라우저에게 응답을 보냄.

   4) 서블릿 맵핑 ( servlet mapping )

     - 개념: 서블릿 요청시 별칭을 사용해서 요청하는 방법.

       a. 별칭 사용하지 않는 경우( OLD 버전, 현재 사용불가 )
        
	  문법:  http://서버ip:port번호/컨텍스트명/servlet/패키지명을포함한서블릿명

            예>  http://localhost:8090/컨텍스트명/servlet/com.servlet.MyServlet

           단점 2가지:  ULR 너무 길다.
	             보안 이슈 발생.
	     
      b.  별칭 사용하는 경우 ( 현재는 반드시 별칭사용해야 됨)

          문법:  http://서버ip:port번호/컨텍스트명/별칭  <== 서블릿 맵핑

           예>  http://localhost:8090/컨텍스트명/my

    - 서블릿매핑 정보를 저장하는 2가지 방법

      가. web.xml (기본)
                  <servlet>
		    <servlet-name>TestServlet2</servlet-name>
		    <servlet-class>com.servlet.TestServlet2</servlet-class>
		  </servlet>
		  
		  <servlet-mapping>
		    <servlet-name>TestServlet</servlet-name>
		    <url-pattern>/test</url-pattern>
		  </servlet-mapping>

      나. 어노테이션 
         - @WebServlet("/my")
	   public class MyServlet extends HttpServlet{


   서블릿을 요청하는 최종 URL 문법은 다음과 같다.

    문법:  http://서버ip:port번호/컨텍스트명/서블릿맵핑

    예>  http://localhost:8090/app01/test



 ////////////////////////////////////////////////////////////////////////////////////////

 10. 서블릿의 LifeCycle

    - Tomcat 컨테이너가 서블릿(JSP)을 생성~삭제까지 관리해줌.
      생성 때 또는 삭제할때 콜백되는 메서드가 제공된다.

    1) init() 메서드
      - 서블릿이 생성될 때 호출
      - 한번만 호출됨. 
      ( 
        하나의 서블릿으로 여러 클라이언트 요청을 처리함.
        여러 클라이언트가 하나의 서블릿으로 공유가 가능함. ( thread-unsafe )
      )

    2) 서비스 메서드
      - 서블릿에 요청할 때 호출
      - doGet(HttpServletRequest request, HttpServletResponse response) 또는 
        doPost(HttpServletRequest request, HttpServletResponse response)
      - 클라이언트가 요청할 때마다 매번 실행
        ( 2개의 파라미터 변수인 
	  HttpServletRequest request 와 HttpServletResponse response 는 
	  로컬변수이기 때문에 매번 생성됨  ( thread-safe )
	 )

    3) destroy() 메서드
       - 서블릿이 삭제될 때 호출
       - 확인하는 방법은 서블릿이 수정후 기다리면 tomcat 컨테이너가 재실행되면서 확인이 가능.

    
 11. 서블릿의 thread-safe 와 thread-unsafe

    1) 인스턴스 변수
      - 서블릿은 단 한번만 생성되기 때문에 인스턴스 변수가 여러 사용자들간에 공유가 가능
        따라서  thread-unsafe 해짐.

    2) doGet 메서드의 로컬변수
      - 로컬변수이기 때문에 thread-safe 해짐.

  결론: 여러 사용자가 공유할 목적이 아닌경우에는 반드시 로컬변수로 사용해야 된다.
      만약 인스턴스 변수 및 static 변수로 만들면 여러 사용자가 공유할 수 있게 된다.


12. 서블릿의 응답처리

   1) 개념
     - 서블릿에서 html 작성해서 웹 브라우저에게 html 응답하는 작업의미.
     - HttpServletResponse API 이용.

   2) 순서

     가. MIME 타입 지정
       --> 웹브라우저에게 전달하는 데이터 타입을 알려주는 작업이다.

        response.setContentType( "text/html" ); 

        Tomcat 10는 한글 응답 처리를 자동으로 설정.
	단 tomcat 9는 한글 응답 처리가 안되어 있음.
	 response.setContentType( "text/html;charset=utf-8" );

    나. I/O 객체 얻기
      
       PrintWriter out = response.getWriter();

    
    다.  print(값) 이용해서 값 출력 ( 웹 브라우저에서 랜더링 됨 )

       out.print("<html>");
       ...

       out.print("</html>");

 
13. 서블릿 요청처리

   1) 개념
     - 웹브라우저에서 사용자 입력폼에 값을 입력하고 서블릿으로 전달하는 방법처리 의미.
     - HttpServletRequest API 이용.

   2) 메서드 제공됨.

        request.getParameter(String name) <=== ?name=value&name2=value2 
        request.getParameterValues(String name) <== String [] 반환,  checkbox에 주로 사용
        request.getParameterNames() <==  name값들만 반환

   3) 아키텍쳐

    웹브라우저                      tomcat
     
            -------------------> memberForm.html
	    <-------------------
   사용자입력후
   서브밋버튼클릭 
            --------------------> MemberServlet.java
	                          사용자입력 데이터 얻기
	    <--------------------
	         입력데이터 출력


    GET 방식으로 요청했을 경우
    - 한글처리가 자동으로 설정
    - 일치하지 않는 name 지정하면 null 값이 반환됨.
    - post(get) 요청했는데 doGet(doPost) 로 받으면 405 에러가 발생됨.
    - <form action="상대경로|절대경로"> 가능
      절대경로는  action="/컨텍스트명/서블릿맵핑"  형식을 사용한다.

    POST 방식으로 요청했을 경우
    - 한글처리가 자동으로 설정  
      단, tomcat 9는 한글이 깨짐. 따라서 한글처리를 명시적으로 해줘야 된다.
         request.setCharacterEncoding("utf-8"); 


14. scope

  1) 개념
    - 자바의 변수(로컬변수,인스턴스변수,static변수)처럼 tomcat 컨테이너가 
      자동으로 생성해주는 3가지 객체의 scope 의미한다.

  2) 3가지 scope
   
    - 공통적인 특징은 변수처럼 데이터를 저장할 수 있는 능력이 있다.

   가. request scope
      - HttpServletRequest API
      - 저장방법:  request.setAttribute(String name, Object obj);
        조회방법:  request.getAttribute(String name);
	삭제방법:  request.removeAttribute(String name);

      - 저장된 데이터의 범위(scope, lifecycle)는  doGet 메서드안에서만 유지되어 사용가능하다.
        즉 사용자가 요청~응답 범위에서만 사용이 가능하다. (***********)

   나. session scope
      - HttpSession API

	 HttpSession session = request.getSession();

      - 저장방법:  session.setAttribute(String name, Object obj);
        조회방법:  session.getAttribute(String name);
	삭제방법:  session.removeAttribute(String name);

      - 저장된 데이터의 범위(scope, lifecycle)는  요청한 웹브라우저와 scope가 동일하다.(브라우저가 다르면 사용불가)
        즉 사용자가 요청시 사용한 웹브라우저를 계속 open 된 상태이면 사용 가능하다.
	만약 close 하면 데이터가 제거된다.

	이론적으로는 웹브라우저를 close하지 않으면 저장된 데이터를 계속 사용이 가능하다.
	하지만 보안이슈로 일정시간이 지나도록 특정한 작업을 하지 않으면 자동으로 저장된 데이터가 삭제된다.
        tomcat의 time-out은 30분이다. 수정도 가능.( web.xml 설정 또는 
setMaxInactiveInterval(int seconds)메서드 이용 )

      - 용도: 로그인

   다. application scope
      - ServletContext API

         ServletContext application = getServletContext(); 

      - 저장방법:  application.setAttribute(String name, Object obj);
        조회방법:  application.getAttribute(String name);
	삭제방법:  application.removeAttribute(String name);

       - 저장된 데이터의 범위(scope, lifecycle)는  tomcat 컨테이너와 scope가 동일하다
        즉 tomcat 컨테이너를 종료하지 않으면 계속적으로 사용 가능하다.
	만약  tomcat 컨테이너를 종료하면 데이터가 제거된다.

   라. page scope


15. 필터(filter)

  1) 용도
    - 서블릿에 요청하기전 및 응답하기 후에 특별한 작업이 가능.

  2) 구현
    - 서블릿과 마찬가지로 필터 클래스를 작성하고 등록해야 된다.
    - 필터는 여러개 등록 가능하고 web.xml에 등록된 순서대로 필터가 실행된다.

    가. 패키지
    나. implments Filter
    다. 메서드 재정의

       doFilter( request, response, FilterChain chain){
       
	    chain.doFilter( request, response );  // 연결
       }
    라. 필터 맵핑 (web.xml 등록)
          <filter>
	    <filter-name>MyFilter</filter-name>
	    <filter-class>com.filter.MyFilter</filter-class>
	  </filter>
	  
	  <filter-mapping>
	    <filter-name>MyFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	  </filter-mapping>
 

 16. DB 연동 ( MyBaits 이용 )

   1) 2 개의 jar 필요. 
     
     - mybatis-3.5.14.jar
     - mysql-connector-j-8.0.33.jar
     - JavaSE 에서는 프로젝트 선택 > 마우스 오른쪽 클릭 > build path > Configure Build path > Libraries.. >
       class path 선택 > Add External Jars... > 2 개의 jar 파일 선택.

     - JavaEE 에서는 WEB-INF/lib 안에 2개의 jar 파일 복사. <== 자동으로 build path 됨

   2) DB 연동위한 4가지 정보 설정
      
      -jdbc.properties
      -com.config 패키지 이용

   3) DTO 작성
    
     - com.dto.EmpDTO.java


   4) 2 개의 xml

      - Configuration.xml
      - EmpMapper.xml
      - com.config 패키지 이용

   5) MySqlSessionFactory.java

      - Configuration.xml 읽기
      - com.config 패키지 이용

   6) DAO, Service 작성

     - com.dao.EmpDAO
     - com.service.EmpService, com.service.EmpServiceImpl 

   
   7) 서블릿 작성

     - com.servlet.EmpListServlet

   
  * Emp 테이블의 목록보기 아키텍쳐

                                   Tomcat
                                                        EmpService
    웹브라우저 ------------------->  EmpListServlet <---> EmpServiceImpl <---> EmpDAO <---> MySQL 
           <-------------------


17.  요청 위임

   
   1) 개념

     가. 일반적인 경우


                         요청
         웹브라우저  ------------------------>  서블릿 
                  <-----------------------
		         응답


     나. 요청 위임한 경우

                            요청
         웹브라우저  ------------------------>  서블릿 
                                               |
					       |  요청위임	( 서블릿이 JSP에게 요청 의미 )

                  <-----------------------     ? ( 서블릿, JSP(*), html )
		            응답


    2) 요청위임 방법 2가지

      가. forward 방식
         - HttpServletRequest API 이용.
	 - 문법:

	   request.getRequestDispatcher("타겟").forward(request, response);

         - 특징:
	    URL이 변경 안됨.( 계속 서블릿으로 남아있음 )
	    하나의 request로 서블릿 및 JSP까지 사용함.
            서블릿에서 3가지 scope(request,session,application)에 데이터를 저장하고
	    jsp에서 가져올때 모든 scope에 저장된 데이터를 참조할 수 있다.


      나. redirect 방식
         - HttpServletResponse API 이용.
         - 문법:
	  
	     response.sendRedirect("타겟");
  
         - 특징:
	    URL이 변경됨.( 서블릿에서 타겟 URL(jsp)로 변경됨 )
	    두개의 request로 서블릿(100번지 request)하고 JSP(200번지 request)를 각각 사용함.

            서블릿에서 3가지 scope(request,session,application)에 데이터를 저장하고
	    jsp에서 가져올때 request scope만  저장된 데이터를 참조할 수 없다.
	    

18. 세션관리( session tracking )

 1)개요

  - HTTP 프로토콜이 connectionLESS, stateLESS 인 특징으로 인해서
    이전 페이지에서 작업했던 상태및데이터를 현재 페이지에서 사용할 수 없게 된다.
    그런데 이것을 알 수 있도록 처리하자. (세션관리 라고 부른다. )

 2) 구현방법 2가지

  가. 세션 이용
    - tomcat 서버에 여러 서블릿(jsp)이 사용할 수 있는 공유데이터를 저장하는 방법이다.
    - HttpSession API 이용.
    - 작업순서
      a. 공유데이터 저장하는 서블릿
         - 빨간색 저장소(세션)를 얻어야 된다.
	   // 세션이 있으면 반환하고 없으면 생성해서 반환.
	   HttpSession session = request.getSession(); (*****)
	   HttpSession session = request.getSession(true);
	   -------------------------------------------------
	   // 세션이 있으면 반환하고 없으면 null 반환.	
	   HttpSession session = request.getSession(false);

         - 공유데이터 저장
	   session.setAttribute("key", "홍길동");

      b. 저장된 공유데이터를 사용하는 JSP(서블릿)
     
         - 빨간색 저장소(세션)를 얻어야 된다.
	   HttpSession session = request.getSession(); 

	 - 공유데이터 참조
	   String str = (String)session.getAttribute("key");
          
         - str 값 체크하기
	   if(str != null){
		// a 작업을 거치후 의미
                // 필요한 작업 하기
	   }else{
               // a 작업을 거치지 않았음을 의미 ( 예> 로그인 )
	       // a 작업을 거치도록 redirect|forward 해줌
	       response.sendRedirect("a작업");
	   }

      c. 삭제

        - 전체 세션 삭제
	  session.invalidate();
          
	  예> 로그아웃

        - 엔트리 삭제
	  
	  session.removeAttribute(key);

	- time-out 이용한 삭제
          session.setMaxInactiveInterval(초단위);  // 지정된 초가 지난후 세션 삭제됨.

      특징:
        - 요청한 웹브라우저와 동일한 scope를 갖는다. 
	- 요청한 웹브라우저의 id 값이 자동으로 서버에 전달된다.
					  
					        서버
	                   jsessionid=AAA     
	   크롬웹브라우저  -------------------->    세션(AAA)
           (AAA)                                     
                           jsessionid=BBB
	   앳지웹브라우저  -------------------->    세션(BBB)
           (BBB)
        - 세션에 저장하는 데이터는 Object 이다. 따라서 모든 데이터를 저장할 수 있다.

      세션관련 메서드
        HttpSession session = request.getSession();

	session.setAttribute(key,value); // 세션에 값을 저장. value는 Object 타입.
	session.getAttribute(key);       // 세션에 저장된 값을 조회.  형변환 필요. 
	session.removeAttribute(key);    // 세션에 저장된 엔트리 삭제

	session.invalidate();              // 세션 즉시 삭제 (저장소 삭제 의미)
	session.setMaxInactiveInterval(초) //  지정된 초 이후에 세션 삭제

	session.getId();                    // jsessionid 얻기
	session.isNew();                    // 조회된 session이 처음 만든 세션이냐?
	session.getCreationTime();          // 세션이 생성된 시간을 long 타입으로 리턴.

     용도:
       로그인, 장바구니

   
     *실습 아키텍쳐

                                              서버
     웹브라우저 
             ------------------------------>  loginForm.jsp
	     <----------------------------- 
      화면랜더링후
      값입력하고
      서브밋 
             ------------------------------> LoginServlet.java
	     <-----------------------------
      화면랜더링후
      MyPage 요청
             --------------------------------> MyPageServlet.java
	     <-------------------------------
     화면랜더링후
      logout 요청     
              --------------------------------> LogoutServlet.java
	      <-------------------------------- 





  나. 쿠키 이용
   - 웹브라우저(클라이언트)에 여러 서블릿(jsp)이 사용할 수 있는 공유데이터를 저장하는 방법이다.
   - Cookie API 이용.
   - 특징
     : 클라이언트에 저장됨.
     : String 값만 저장 가능
     : 도메인당 50개 저장 가능하고 각 크기는 4kb 제한.
     : 세션보다 보안에 취약하고 가장 큰 단점은 사용자가 쿠키를 사용하지 않도록 설정이 가능하다.


   - 쿠키 아키텍쳐
                                                     서버
                 a. 요청
     브라우저 --------------------------------------->  서블릿(A)
                                                             b. 쿠키생성
							      Cookie c = new Cookie(key, value);
                                                              // 웹브라우저 메모리/PC 파일
							      c.setMaxAge(값)
							       값: 양수, 지정된 값만큼 pc파일에 저장됨.
							       값: 음수, 웹브라우저 메모리에 저장됨. (기본)
							       값: 0, 쿠키 즉시 삭제.( 세션의 invalidate()동일)
                                                             
							     c. 쿠키를 클라이언트에 전송
	  						      response.addCookie(c);

	  <--------------------------------------------
	        d. 응답(쿠키)

 e. 
  클라이언트에
  쿠키저장
 -웹브라우저 메모리
 -PC 파일
               f. 요청(쿠키)
         -------------------------------------------------->   서블릿(B),  서블릿(C), JSP

	                                                     g. 쿠키 얻기
							     Cookie [] cookies = request.getCookies();

							     for(Cookie c: cookies){
							        String key = c.getName();
								String value = c.getValue();

							     }

	   h. 쿠키 삭제 요청(쿠키)
         -------------------------------------------------->   서블릿(D),

							    Cookie [] cookies = request.getCookies();

							     for(Cookie c: cookies){
							        String key = c.getName();
								if("aaa".equals(key)){
								  
								   c.setMaxAge(0);
							           response.addCookie(c);
								}
							     }

###########################################################################################
19. JSP

  1) 특징
   - 동적 컴포넌트 ( 서버에서 실행되어 동적으로 결과를 만듬, 실행결과는 html 만듬 )
   - *.jsp 이고 저장 경로는 html과 동일한 src/main/webapp 에 저장.
   - 서블릿은 요청하면 doGet|doPost가 실행됨.
     JSP 요청하면 3단계를 거쳐서 실행됨

       가. 변환 단계
         *.jsp ---->*_jsp.java ( 서블릿이라고 생각하자)

       나. 컴파일 단계
         *_jsp.java -----------> *_jsp.class

       다. 실행 단계
         *_jsp.class --------------> html 반환

   - 서블릿은 대부분이 java 코드이고 일부분은 html 코드이다. ( 서블릿은 비즈니스 로직 처리 잘함 )
     JSP는 대부분이 html코드이고 일부분이 java 코드이다.   ( jSP는 화면 처리 잘함 )

  2) 웹 어플리케이션 개발 방법 2가지

    가. Model 1 Architecture
       - 과거에는 사용되었으나 현재는 사용안함.
       - JSP 만 이용해서 웹 어플리케이션 개발하는 방식의미

       예>                             Tomcat
          웹브라우저 ------------------> JSP <------> Service <----> DAO <--> MySQL



    나. Model 2 Architecture ( MVC )
       - 현재 사용중.
       - 서블릿 + JSP

        예>                             Tomcat
          웹브라우저 ------------------> Servlet  <------> Service <----> DAO <--> MySQL
					|
					|  요청위임 
					|
                  <------------------ JSP

   3) JSP 구성요소
  
     가. html 태그
     나. JSP 태그
         a. directive 태그
	      - page directive 태그
	            <%@ page  속성명="속성값"  속성명="속성값" ...        %>

	      - include directive 태그
                    <%@ include file="jsp파일" %>

	      - taglib directive 태그
                    <%@ taglib prefix="속성값"  uri="속성값" %>

	 b. declaration 태그
	     - 서블릿의 doGet 메서드밖의 자바코드 ( 인스턴스 변수,인스턴스 메서드)

	       <%!  자바코드 %>

	 c. scriptlet 태그 (*************)
             - 서블릿의 doGet 메서드안의 자바코드

	       <%  자바코드 %>
	
	 d. expression 태그

	       <%= 변수 %>

	
	* JSP 액션태그
	 
	 <jsp:식별자  속성명="속성값" />
	
	 수업에서 배울 JSP 액션태그는 다음과 같다.
	 <jsp:include page="jsp파일"  flush="true" />


     다. EL 태그
       - 문법: ${key} 

     라. JSTL(taglib) 태그


  4) directive 태그

    가. page directive

      문법: <%@ page  속성명="속성값" ... %>
      기능: JSP에게 특정 설정정보를 알려주는 용도.


      a. MIME 타입 지정

        서블릿:  response.setContentType("text/html;charset=utf-8"); 

	JPS:  <%@ page  contentType="text/html; charset=UTF-8"  %>


      b. import 지정

         서블릿:  import java.util.ArrayList;
                import java.util.Date;

	 JPS:  <%@ page import="java.util.Date" %>
               <%@ page import="java.util.ArrayList" %>

   나. include directive
    
     문법: <%@ include  file="jsp파일" %> <== 지정된 jsp파일내용이 정적으로 치환됨. 정적 include
          <jsp:include page="jsp파일"  flush="true" /> <== 지정된 jsp파일내용이 실행된 결과값(동적)으로 치환됨. 동적 include

     기능: 화면 재사용. html의 <iframe> 태그와 비슷한 기능.


   다. taglib directive
     문법: <%@ taglib prefix=""  uri="" %>
     기능: JSTL 사용시 사용됨.


   5) declaration 태그 ( 거의 사용안됨 )

      문법: <%!  자바코드  %>
      기능: 서블릿에서 인스턴스 변수, 인스턴스 메서드 지정시 사용됨.
   

   6) scriptlet 태그 (*************)
      - 가장 많이 사용됨.

      문법: <%  자바코드  %>
      기능: 서블릿에서 doGet 메서드내의 코드 구현

   7)  expression 태그

      문법: <%=  변수 %>
      기능: 웹 브라우저에 변수값을 출력

   
   8) 내장객체( 내장 변수 )

     개념: scriptlet 태그안에 선언되지 않고 사용가능한 변수를 의미.
          내부적으로 미리 선언되어 있음.


    9) JSP 주석

      <%--  --%>

20. Servlet + JSP ( MVC 모델, Model 2 Architecture )


     - 현재 사용중.
       - 서블릿 + JSP

        예>                             Tomcat
          웹브라우저 ------------------> Servlet  <------> Service <----> DAO <--> MySQL
					|
					|  요청위임 
					|
                  <------------------ JSP

   - MVC 모델

     M: Model ( Service + DAO 담당)
     V: View  ( JSP 담당 )
     C: Controller ( 서블릿 담당 )


21. 게시판 구현 ( MVC )

 1) 테이블 작성

    create table board (
       num INT PRIMARY KEY  AUTO_INCREMENT,
       title VARCHAR(100) NOT NULL,
       author VARCHAR(50) NOT NULL,
       content VARCHAR(2000) NOT NULL,
       writeday DATE DEFAULT (current_date),
       readcnt INT DEFAULT 0
    );

   insert into board ( title, author, content )
   values ( '테스트', '홍길동', '테스트입니다.');
   commit;

  2) MyBatis 환경설정
     - 2개의 jar를 WEB-INF/lib 복사
     - jdbc.properties
       Configuration.xml
       BoardMapper.xml
       MySqlSessionFactory.java
     - com.dto.BoardDTO.java

  3) 게시판 목록보기

                     /list                       BoardService 
   웹브라우저 -------> BoardListServlet <----> BoardServiceImpl <----> BoardDAO <--------> MySQL
                          |
			  |
			  |
	  <--------    list.jsp

  4) 게시판 글쓰기 ( 2 단계 )

             get      /writeUI
    웹브라우저 -------> BoardWriteUIServlet (doGet)
                          |
			  |
			  |
	  <--------    write.jsp


             post    /write    
    웹브라우저 -------> BoardWriteServlet <----> BoardServiceImpl <----> BoardDAO <--------> MySQL
                          | (doPost)
			  |
			  |
	  <--------   BoardListServlet


  5) 글 자세히 보기

                     /retrieve
    웹브라우저 -------> BoardRetrieveServlet <----> BoardServiceImpl <----> BoardDAO <--------> MySQL
                          | 
			  |
			  |
	  <--------   retrieve.jsp
 
  6) 글수정하기

                   /update
    웹브라우저 -------> BoardUpdateServlet <----> BoardServiceImpl <----> BoardDAO <--------> MySQL
                          | 
			  |
			  |
	  <--------  BoardListServlet


  7) 글삭제하기

                   /delete
    웹브라우저 -------> BoardDeleteServlet <----> BoardServiceImpl <----> BoardDAO <--------> MySQL
                          | 
			  |
			  |
	  <--------  BoardListServlet


   8) 페이징 처리
    
     - 레코드가 정렬
     -필요한 값 정리
      List<BoardDTO> list;
      int curPage; // 현재페이지
      int perPage=3; // 페이지당 보여줄 레코드 갯수
      int totalRecord; // 전체 레코드 갯수

      ==> PageDTO 클래스에 모두 저장.



22. EL ( Expression Language )
 
  1) 기능
     특정값을 웹브라우저에 출력.

  2) 문법:

      ${리터럴값|key}  <== scope에 저장된 key 값

  3) 특징
     ${리터럴값+1} <== 산술연산 가능
     ${리터럴값 > 1} <== 비교연산 가능
     ${리터럴값 > 1 && 리터럴값 < 30} <== 논리연산 가능
   
   - null 값은 비어있는 값으로 출력하고
     null 값 비교는 empty 사용.
     예> 널 값비교: ${empty xxx2}

   - 조건 및 반복 처리 불가 ( 해결: JSTL )

  4) ${key}
   
    - 서블릿에서 scope에 저장된 값을 출력할 때 사용.

     예>  //서블릿
          request.setAttribute("userid","홍길동");

         //JSP에서 JSP 태그 이용한 방법
         <%
            String userid = (String)request.getAttribute("userid");
	 %>
	 <%= userid %>  <== 홍길동 출력

         //JSP에서 EL 이용한 방법 
         ${userid}  <== 홍길동 출력
  
    5) 명시적인 scope 지정
      - 기본은 request

       request:${requestScope.xxx} <br>
       session:${sessionScope.xxx} <br>
       application:${applicationScope.xxx} <br>



23. JSTL ( Jsp Standard Tag Library )

   1)개요
    - JSP에서 사용한 커스텀 태그 의미.
    예>
       <for start=1 end=5>
         hello
       </for>
     
     - 2가지 필요
       *.java
       *.tld ( tag library definition)
      
    결론은 전세계의 선배 개발자들이 JSP에서 유용하게 
    사용할 만한 커스텀 태그를 만들어 제공이 된다.
    실습에서는 Apache에서 제공하는 JSTL를 사용할 것이다.

   2) 구현방법

     가. 2개의 jar를 build path ( Tomcat 10.1 버전에 최적화 )

        jakarta.servlet.jsp.jstl-3.0.1.jar
	jakarta.servlet.jsp.jstl-api-3.0.0.jar

	WEB-INF/lib 폴더에 복사.

      
     나. JSP에서 JSTL 사용 등록 ( Tomcat 10.1 버전에 최적화 )
     
        문법: <%@ taglib prefix="속성값"  uri="속성값" %>

           <%@ taglib prefix="c"  uri="jakarta.tags.core" %>
	   <%@ taglib prefix="fn"  uri="jakarta.tags.functions" %>
	   <%@ taglib prefix="fmt"  uri="jakarta.tags.fmt" %>
	   <%@ taglib prefix="sql"  uri="jakarta.tags.sql" %>
	   <%@ taglib prefix="x"  uri="jakarta.tags.xml" %>
	
     다. JSTL + EL 사용

       a. 값 출력
          request.setAttribute("xxx", "홍길동");


          EL만 사용:${xxx} <br>
          JSTL 사용: <c:out value="${xxx}" />
 
       b. 변수 사용
           request.setAttribute("xxx", "홍길동");

             <h1>set 커스텀 태그 실습</h1>
	   변수저장:
	   <c:set var="id" value="${xxx}" />
	   <hr>
	   이름:${id}<br>
	   이름:<c:out value="${id}" /><br>
	 
       c. 조건 ( 단일 if문 )

            <c:if test="${username =='홍길동'}">
	      안녕하세요. 홍길동님
	   </c:if>

       c. 조건 ( choose 문 )

           <c:choose>
	    <c:when test="${age > 50}">
	       중년입니다.
	    </c:when>
	    <c:when test="${age > 40}">
	       장년입니다.
	    </c:when>
	    <c:otherwise>
	       청년입니다. 
	     </c:otherwise>	
	   </c:choose>

	d. 반복문

	  가. range 반복

	        <c:forEach var="변수명" begin="시작값" end="끝값">
		   반복처리:${변수명}
		</c:forEach>

          나. scope 에 저장된 데이터 반복

	        List<Person> list = Arrays.asList(new Person("홍길동", 20), 
						        new Person("이순신", 30) );
		request.setAttribute("xxx", list);

		<h1>2. 반복- scope에 저장된 데이터</h1>
		   <c:forEach var="p"  items="${xxx}">
		     이름:${p.username}, 나이:${p.age}<br>
		   </c:forEach>

	  다. scope 에 저장된 데이터 반복2 - 상태값 조회
	      <c:forEach var="p"  items="${xxx}" varStatus="status">
		     index:${status.index} <br>
		     count:${status.count} <br>
		     first:${status.first} <br>
		     last:${status.last} <br>
		   </c:forEach>


          라. url 경로 설정

                   <h1>1. 이전 방식의 경로 설정</h1>
		   상대경로: <a href="target.jsp">이전방식:상대경로</a> <br>
		   절대경로: <a href="/app14/target.jsp">이전방식:절대경로</a> <br>
		  
		   <h1>2. JSTL 이용한 경로 설정</h1>
		   상대경로: <a href="<c:url value='target.jsp' />">JSTL방식:상대경로</a> <br>
		   절대경로: <a href="<c:url value='/target.jsp' />">
		   JSTL방식:절대경로(/만 지정하면 자동으로 컨텍스트명(app14)를 자동으로 설정함)
		   </a>
