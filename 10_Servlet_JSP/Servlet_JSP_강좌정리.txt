
Servlet/JSP 강좌정리

1.  자바 개발 플랫폼 3가지
 
  1) Java SE ( Java Standard Edition)
      - 자바 spec.
      - 환경구축방법: JDK 17 설치
      - 개발프로그램 형태: 비웹 환경의 로컬로 실행되는 프로그램 개발이 가능.

  2) Java EE ( Java Enterprise Edition )
     
      - Servlet/JSP spec. ( spec는 인터페이스 라고 생각하자 )
        실제로 Servlet/JSP spec를 구현한 구현체는 Tomcat 서버가 제공하는 구현체를 사용할 것이다.

	  예>    오라클(Servlet/JSP spec 제공: 인터페이스)
	              |
	     Tomcat서버       Resin서버   ... 
            (Servlet/JSP spec를 구현함. .jar 형태로 제공)
      
      - jsp-api.jar 와 servlet-api.jar 가 제공됨.
      - 개발프로그램 형태: 웹 어플리케이션 개발이 가능.

  3) Java ME ( Java Micro Edition )
      - 개발프로그램 형태:  휴대용 장치에서 실행되는 개발이 가능.
     

2. 환경설정

  1) Java SE 환경 구축: JDK 17 설치

     - JDK 설치후 2개의 환경변수 설정
      JAVA_HOME=C:\Program Files\Java\jdk-17  <=== JDK의 홈디렉터리 경로 설정
      PATH=%JAVA_HOME%\bin;기본PATH                                   <=== 윈도우의 프로그램에 명령어 경로 설정
           C:\Program Files\Java\jdk-17\bin;기본PATH   
  
  2) Eclipse 설치
     - http://www.eclipse.org
     - JDK 17 지원여부 확인 필수.
     - eclipse-jee-2024-06-R-win32-x86_64.zip
       설치는 압축풀면 됨.
  
  3) Tomcat 서버 ( Tomcat 컨테이너 )
    
     - http://jakarta.apache.org 
     - JDK 17 버전을 지원하는 Tomcat 10 다운로드.
     - jsp-api.jar 와 servlet-api.jar 가 제공됨.
       ( Servlet 6.0 and Pages 3.1 )
     - apache-tomcat-10.1.28.zip
       설치는 압축풀면 됨.

     - 기본 port 번호: 8080  ( 만약 Oracle DB 설치하면 내부적으로 tomcat을 설치함(8080) )

    * tomcat9 vs tomcat10
 
       tomcat9: JDK11까지만 지원됨.
                패키지명은 javax.servlet 로 시작됨.
		패키지 관리를 Oracle로 했음.

       tomcat10: JDK17부터 지원됨.
                패키지명은 jakarta.servlet 로 시작됨.
                패키지 관리를 Oracle 아닌 Apache에서 관리함.
                
             서블릿관련 API 문서
	     https://tomcat.apache.org/tomcat-10.1-doc/servletapi/index.html

     - 필요시 환경변수 설정가능

       CATALINA_HOME=C:\servlet_study\apache-tomcat-10.1.28  <== bin 디렉터리 전까지
       


3. eclipse 와 Tomcat 연동

 1) eclipse 실행
   - C:\servlet_study\eclipse 에 workspace 작성
   - C:\servlet_study\eclipse\workspace 경로를 작업디렉터리로 지정
   - Java EE 퍼스펙티브 선택 ( 기본 )
   - 한글인코딩 설정
      a. window > preference > general > workspace 선택하고 text file encoding 값을 utf-8 로 설정 (기본)
      b. window > preference > web > html,css,jsp 선택하고 Encoding 값을 utf-8 로 설정 (기본)

   - JDK 17로 변경
 
      window > preference > java > compiler > 17 로 변경   
      window > preference > java > installed JRES >  기존 jre 체크된 것은 삭제하고 
                                                     우리 환경에 맞는 C:\Program Files\Java\jdk-17 선택.
     

  2) eclipse와 tomcat 연동 (*****************)

     - 교안 13 페이지 참조.



4. 프로젝트 생성

   - File > New > Dynamic Web Project 선택.  ( 프로젝트명: HelloTest )
   - Web Module 에서 출력된 내용은 다음과 같다.

     1) Context Root ( 논리적인 이름 )
       - 기본값은 프로젝트명으로 되어있음. ( 언제든지 변경 가능 )
       - 웹브라우저에서 요청시 사용됨.


           http://localhost:8090/컨텍스트명

	   예> http://localhost:8090/a
 

         컨텍스트명(논리적인경로       webapps안의 실제폴더(물리적인 경로, 웹어플리케이션)
        --------               -----------------------
          docs                   docs        <== http://localhost:8090/docs/index.html
	 examples		 examples     <== http://localhost:8090/examples/index.html
	    /			 ROOT        <== http://localhost:8090/index.jsp
	                                         http://localhost:8090/ 
						 ( servers > web.xml >  <welcome-file-list> 태그안에
						   메인 홈 페이지에 해당하는 파일명이 설정되어있음.
						   이 파일명은 url에 지정하지 않아도 자동으로 찾음 )

	   a                     HelloTest  <== http://localhost:8090/a

      - 용도: 실제 tomcat의 배포경로(depoy path)인 webapps 에 만들어지는 물리적인 폴더인 웹어플리케이션을
             찾을때 사용하는 논리적인 이름을 context라고 부른다.

      - 변경방법
        이클립스 servers 탭 > tomcat 서버 클릭 > module > edit > Path 에  context명 수정( 반드시  / 로 시작)

   2) Content Directory

      - 개발자가 만든 소스가 저장되는 eclipse 디렉터리이다.


   
   3) web.xml
    
     - 배치 지시자 ( deployment descriptor )라고 부르고
       생성된 웹 어플리케이션(HelloTest)의 전반적인 설정정보 담당하는 역할.
       (예>서블릿 맵핑, welcome file list, .. )

     * 웹 어플리케이션 설정 정보를 등록하는 방법 2가지
      
       가. web.xml ( 기본 )
         - Spring framework에서도 xml 이용해서 환경정보를 설정한다.

       나. 어노테이션 ( @ 으로 시작 )
         예> @WebServlet()
	     ....



5. eclipse 에서 생성된 웹 어플리케이션 디렉터리 구조

    HelloTest
      Java Resource
          src/main/java  <== 소스파일( java ) 저장
	  libraries
	     JRE System Library <== JDK 라이브러리
	     Server Runtime     <== jsp-api.jar 와 servlet-api.jar

      src
         main
	     java   <== 소스파일( java ) 저장

	     webapp <== 웹 관련 파일(html,jsp,css,js,img등)이 이클립스에 저장하는 디렉터리이다.
	       
	        WEB-INF <== 대문자로 지정, 웹 어플리케이션에서는 필수.
		            WEB-INF 폴더내에 저장된 파일은 웹 브라우저에서(외부) 접근이 불가 ( 보안 이슈 )
			    
		    lib  <== 외부에서 가져와서 사용하는 라이브러리(.jar) 등록 폴더.
		           나중에 mybatis.jar 와 mysql-connector.jar 2개의 jar 파일을 저장할 예정임.

		    web.xml  <== 웹 어플리케이션(HelloTest)의 전반적인 설정정보 담당.

	        *.html 
		*.jsp  <== jsp 파일
		*.css
		*.js
		image


  6. tomcat 의 배포된 디렉터리 구조 (*******************)
 
     tomcat/webapps   <==== 배포경로 ( deploy path )

                  HelloTest  <== 웹 어플리케이션 (물리적인 디렉터리 )
                       META-INF
		       WEB-INF (필수 )
		           classes <== *.java에 대한 *.class 파일들이 저장
			   lib     <== *.jar 저장 
			   web.xml <== 설정 정보 저장
			   
		       main.jsp
		       css
		       js
		       image



 7. 서버에 작성 가능한 3가지 컴포넌트 


    클라이언트              요청          서버(tomcat: 8090)
   (웹브라우저)  ----------------------->  
                                       1) html (정적 컴포넌트)
                                          src/main/webapp 에 저장
				       2) jsp  (동적 컴포넌트)
				          src/main/webapp 에 저장
				       3) 서블릿 (동적 컴포넌트)
				          src/main/java 에 저장

	      <---------------------
	                 응답 (html)

 8. 3가지 컴포넌트 웹 브라우저에서 요청하는 URL

   문법: 
         http://서버IP:port번호/컨텍스트명/자원(html/JSP/Servlet)


    1) 정적 컴포넌트 ( html ) - 디렉터리 없는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/html자원




    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                          main.html
           a. http://localhost:8090/컨텍스트명/main.html
	   ----------------------->  
	                             b. main.html 검색
				       만약 없으면 404 에러 발생
				       있으면 다운로드 해줌
           <----------------------
	    c. main.html 다운로드

   d. main.html
    랜더링

    1) 정적 컴포넌트 ( html ) - 디렉터리 있는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/디렉터리명/html자원


    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                          html/main.html
           a. http://localhost:8090/컨텍스트명/html/main.html
	   ----------------------->  
	                             b. main.html 검색
				       만약 없으면 404 에러 발생
				       있으면 다운로드 해줌
           <----------------------
	    c. main.html 다운로드

   d. main.html
    랜더링


    2) JSP 요청 ( 동적 컴포넌트 ) - 디렉터리 없는 경우

     요청 URL:  http://서버IP:port번호/컨텍스트명/jsp자원

    클라이언트                         서버(tomcat: 8090)
   (웹브라우저)                           main.jsp

           a. http://localhost:8090/컨텍스트명/main.jsp
	   ----------------------->  
	                              b. main.jsp 검색
				       만약 없으면 404 에러 발생
				       있으면 3단계 실행됨 (**********************)
				   확인방법: C:\servlet_study\apache-tomcat-10.1.28\work\컨텍스트명폴더
				   
				         가. 변환단계
					   main.jsp ------> main_jsp.java

					 나. 컴파일 단계
					   main_jsp.java --> main_jsp.class

					 다. 실행 단계
					  main_jsp.class ==>  html로 결과가 나옴.

	   <----------------------
	    c.  html 다운로드
				 
 d. html 랜더링					 

			
 9. 서블릿 ( servlet )
 
   1. 서블릿 특징
     - *.java 로 작성됨.
     - 저장위치는 이클립스의 src/main/java 에 저장되고
       반드시 패키지를 사용해야 된다.
     - main 메서드가 없음. 즉 시작점이 없다.
       이유는 사용자가 요청하는 컴포넌트가 시작점 역할을 한다.

     - 직접 new 하지 않음. Tomcat 컨테이너가 필요한 시점에 생성(new) ~  소멸까지 해줌.
      즉 Tomcat 컨테이너가 서블릿/JSP 동적 컴포넌트를 관리해 줌.

     - 실행결과는 html로 나옴.
     - Servlet 6.0 버전은 Tomcat 10 이상 필요하고 패키지명은 javax가 아닌 jakarta 패키지로 시작된다.
     - Tomcat10 의 servlet-api.jar 에 포함된 패키지를 사용해서 서블릿을 구현할 수 있다.
     - 참조할 API 문서는 https://tomcat.apache.org/tomcat-10.1-doc/servletapi/index.html 이다.

   2. 구현 방법

     1) 패키지로 작성 
     2) extends HttpServlet  ( jakarta.servlet.http 패키지, 추상클래스 )

 ////////////////////////////////////////////////////////////////////////////////////////
         * 계층구조 ( 외우기 ************************* )


	  Servlet(인터페이스)    ,  ServletConfig(인터페이스)
		 |
	         |
             GenericServlet(추상 클래스)
                 |
	     HttpServlet(추상 클래스)
                 |
	   사용자정의 서블릿


     Servlet(인터페이스): 
       ==>  jakarta.servlet 패키지
            init(ServletConfig config)  : 서블릿 생성시 자동으로 호출 콜백
            destory():서블릿 삭제시 자동으로 호출 콜백
	    service(ServletRequest req, ServletResponse res): 서블릿이 해야되는 실제 작업 정의하는 메서드.
            getServletConfig(): ServletConfig 인터페이스 반환하는 메서드
 
     ServletConfig(인터페이스)
       ==>  jakarta.servlet 패키지
            getInitParameter(String key|name): 문자열로 값을 반환
            getInitParameterNames():  name(key)값만 반환, Enumeration 반환 ( Iterator 비슷한 기능)
            getServletContext(): ServletContext 타입 반환  (***************)

	    최종적으로 사용자가 만든 서블릿에서 ServletContext를 얻는 방법은 다음과 같아.
	   예> ServletContext sc = getServletContext(); (*********************)

     ServletContext(인터페이스)
      ==> jakarta.servlet 패키지
          addFilter(), createFilter()
	  addServlet(), createServlet()
	  setAttribute(name,value), getAttribute(name), getAttributeNames(), removeAttribute(name)
	  getContextPath()
          getInitParameter(String key|name): 문자열로 값을 반환
          getInitParameterNames():  name(key)값만 반환, Enumeration 반환 ( Iterator 비슷한 기능)
	  ..

     GenericServlet(추상 클래스)
      ==> jakarta.servlet 패키지
          init()
          log(String message)

     HttpServlet(추상 클래스)
      ==> jakarta.servlet.http 패키지
          doGet(HttpServletRequest req, HttpServletResponse resp): 기본, 클라이언트에서 get 방식 요청시 처리하는 메서드
          doPost(HttpServletRequest req, HttpServletResponse resp): 클라이언트에서 post 방식 요청시 처리하는 메서드
	  doDelete(..), doPut(..)
	
	 => method 불일치 예> get요청 ---> doPost 처리하고자 하면 405 에러 발생됨.


     사용자정의 서블릿
     ==>  위에서 살펴봤던 메서드를 그냥 사용 및 재정의 할 수 있다.
 
   3) doGet(기본) 또는 doPost 인 서비스 메서드를 반드시 재정의 해야 된다.

    예>  package com.servlet;

        public class MyServlet extends HttpServlet{
	 public void doGet(HttpServletRequest req, HttpServletResponse resp){
                 //실제 코드 작업
	 }
	}

         HttpServletRequest API (인터페이스)
	  ==> 요청관련 작업 담당
              getParameter(String name) <=== ?name=value&name2=value2 
              getParameterValues(String name) <== String [] 반환,  checkbox에 주로 사용
              getParameterNames() <==  name값들만 반환
              setAttribute(name,value), getAttribute(name), getAttributeNames(), removeAttribute(name)
              getRequestDispatcher(String path) <== 지정된 path로 요청함. JS의 location.href 비슷한 기능. 
	                                            forward 방법으로 부른다.
	      getCookies() <=== Cookie[] 반환,  쿠키 정보를 얻음.
              getSession() <=== HttpSession 반환, 세션 정보를 얻음.
              getHeader(name) <== header 값 조회


         HttpServletResponse API (인터페이스)
          ==> 응답관련 작업 담당
	      addCookie(Cookie c) <=== 쿠키정보를 웹브라우저에 추가하는 메서드
	      sendRedirect(String location) <== 지정된 location로 요청함. JS의 location.href 비슷한 기능. 
	                                          redirect 방법으로 부른다.

              setContentType(String type) <== MIME타입이라고 부름. 
	                                      서버가 클라이언트에게 전달할 데이터타입을 의미함.
					      예>text/html
	      getWriter() < === PrintWriter 타입 반환.
	                        PrintWriter 의 print(값) 이용해서 웹브라우저에게 응답을 보냄.

   4) 서블릿 맵핑 ( servlet mapping )

     - 개념: 서블릿 요청시 별칭을 사용해서 요청하는 방법.

       a. 별칭 사용하지 않는 경우( OLD 버전, 현재 사용불가 )
        
	  문법:  http://서버ip:port번호/컨텍스트명/servlet/패키지명을포함한서블릿명

            예>  http://localhost:8090/컨텍스트명/servlet/com.servlet.MyServlet

           단점 2가지:  ULR 너무 길다.
	             보안 이슈 발생.
	     
      b.  별칭 사용하는 경우 ( 현재는 반드시 별칭사용해야 됨)

          문법:  http://서버ip:port번호/컨텍스트명/별칭  <== 서블릿 맵핑

           예>  http://localhost:8090/컨텍스트명/my

    - 서블릿매핑 정보를 저장하는 2가지 방법

      가. web.xml (기본)
                  <servlet>
		    <servlet-name>TestServlet2</servlet-name>
		    <servlet-class>com.servlet.TestServlet2</servlet-class>
		  </servlet>
		  
		  <servlet-mapping>
		    <servlet-name>TestServlet</servlet-name>
		    <url-pattern>/test</url-pattern>
		  </servlet-mapping>

      나. 어노테이션 
         - @WebServlet("/my")
	   public class MyServlet extends HttpServlet{


   서블릿을 요청하는 최종 URL 문법은 다음과 같다.

    문법:  http://서버ip:port번호/컨텍스트명/서블릿맵핑

    예>  http://localhost:8090/app01/test



 ////////////////////////////////////////////////////////////////////////////////////////

 10. 서블릿의 LifeCycle

    - Tomcat 컨테이너가 서블릿(JSP)을 생성~삭제까지 관리해줌.
      생성 때 또는 삭제할때 콜백되는 메서드가 제공된다.

    1) init() 메서드
      - 서블릿이 생성될 때 호출
      - 한번만 호출됨. 
      ( 
        하나의 서블릿으로 여러 클라이언트 요청을 처리함.
        여러 클라이언트가 하나의 서블릿으로 공유가 가능함. ( thread-unsafe )
      )

    2) 서비스 메서드
      - 서블릿에 요청할 때 호출
      - doGet(HttpServletRequest request, HttpServletResponse response) 또는 
        doPost(HttpServletRequest request, HttpServletResponse response)
      - 클라이언트가 요청할 때마다 매번 실행
        ( 2개의 파라미터 변수인 
	  HttpServletRequest request 와 HttpServletResponse response 는 
	  로컬변수이기 때문에 매번 생성됨  ( thread-safe )
	 )

    3) destroy() 메서드
       - 서블릿이 삭제될 때 호출
       - 확인하는 방법은 서블릿이 수정후 기다리면 tomcat 컨테이너가 재실행되면서 확인이 가능.

    
 11. 서블릿의 thread-safe 와 thread-unsafe

    1) 인스턴스 변수
      - 서블릿은 단 한번만 생성되기 때문에 인스턴스 변수가 여러 사용자들간에 공유가 가능
        따라서  thread-unsafe 해짐.

    2) doGet 메서드의 로컬변수
      - 로컬변수이기 때문에 thread-safe 해짐.

  결론: 여러 사용자가 공유할 목적이 아닌경우에는 반드시 로컬변수로 사용해야 된다.
      만약 인스턴스 변수 및 static 변수로 만들면 여러 사용자가 공유할 수 있게 된다.


12. 서블릿의 응답처리

   1) 개념
     - 서블릿에서 html 작성해서 웹 브라우저에게 html 응답하는 작업의미.
     - HttpServletResponse API 이용.

   2) 순서

     가. MIME 타입 지정
       --> 웹브라우저에게 전달하는 데이터 타입을 알려주는 작업이다.

        response.setContentType( "text/html" );


    나. I/O 객체 얻기
      
       PrintWriter out = response.getWriter();

    
    다.  print(값) 이용해서 값 출력 ( 웹 브라우저에서 랜더링 됨 )

       out.print("<html>");
       ...

       out.print("</html>");

 
13. 서블릿 요청처리