
REST 강좌정리

1. REST 개요

   - REpresentational State Transfer  ( 표현 상태 전송 )
   - 웹 어플리케이션 개발 방법론의 하나로서 클라이언트(웹브라우저, 핸드폰, 테블릿, 셋탑박스,..)와 서버간의 상태정보를 표현하는 방법임.
   - 이전 방식의 웹어플리케이션 방법은 SOAP(Service Oriented Application Programming) 방법론임.


   1) SOAP 방식
	                요청
	클라이언트 --------------------------> 서버
       (웹브라우저)                            (JSP, Thymeleaf 등) 
	      <--------------------------
	                html

      ==> 2차 미니 프로젝트 아키텍쳐


   2) REST 방식

                        요청(XML/JSON)
	클라이언트 --------------------------> 서버
       (웹브라우저
        모바일,TV,
	자동차,..
        )                           
	      <--------------------------
	                응답(XML/JSON)


    * 최종 프로젝트 아키텍쳐

       
                        요청(XML/JSON)
	클라이언트 --------------------------> 서버 (SpringBoot)
       (웹브라우저,
        모바일
	=>Reactjs
        )                           
	      <--------------------------
	                응답(XML/JSON)


 2. REST 특징

   1) 클라이언트 요청 방식

      가. SOAP 방식

	  GET  방식: 조회시 주로 사용. ( SELECT 시)
	  POST 방식: 생성,수정,삭제 주로 사용 ( INSERT, UPDATE, DELETE 시)

       ==> html의 form 태그에서 지원하는 방법은 method=GET|POST만 가능.

      나. REST 방식
 
          GET 방식:  조회시 사용   ( SELECT 시)
	           @GetMapping 이용
	  POST 방식: 생성시 사용   ( INSERT 시)
		   @PostMapping 이용
		   header값 필수: Content-Type: application/json
	  PUT 방식:  수정시 사용   ( UPDATE 시)
	           @PutMapping 이용
		    header값 필수: Content-Type: application/json
	  DELETE 방식: 삭제시 사용 ( DELETE 시)
	           @DeleteMapping 이용


       ==> PUT과 DELETE 까지 요청가능한 도구(tool)이 필요함
          예> curl ( client url, 텍스트 기반, Linux 등에서 많이 사용됨 )
	     postman, Talend API ( GUI 기반 )

  //////////////////////////////////////////////////////////////////
     * 맵핑요청시 사용하는 권장 방법 ( 엔드포인트(end-point) 값이라고 부른다. )

       GET 요청: /rest/users       <== 모든 users 정보 조회
       GET 요청: /rest/users/username       <== 모든 users 정보중에서 username 값만 조회
       GET 요청: /rest/users/:id    <==  id에 해당되는 users 정보 조회

       POST 요청: /rest/users
                추가로 실제 저장할 데이터 지정: { "id":40, "username":"강감찬", birthdate:"2025-12-21"}
		추가로 header 정보 설정:  Content-type: application/json 
 
       PUT  요청: /rest/users/:id    <==  id에 해당되는 users 정보 조회
		추가로 실제 수정할 데이터 지정: { "username":"강감찬", birthdate:"2025-12-21"}
		추가로 header 정보 설정:    Content-type: application/json 


       DELETE 요청: /rest/users/:id  <==  id에 해당되는 user 삭제 
  //////////////////////////////////////////////////////////////////



   2) Controller 

        가. SOAP 방식

	     @Controller
	     public class MainController{

	         //JSP 응답
		 @GetMapping("/jsp")
		 public String xxx(){

                     return "hello"; // hello.jsp
		 }

		 //JSON 응답
		 @GetMapping("/json")
		 @ResponseBody
		 public String yyy(){

                     return "hello"; 
		 }
	     }


	 나. REST 방식

	    @Controller
	     public class MainController{

	         //JSON 응답
		 @GetMapping("/json1")
		 @ResponseBody
		 public String xxx(){

                     return "hello"; 
		 }

		 //JSON 응답
		 @GetMapping("/json2")
		 @ResponseBody
		 public String yyy(){

                     return "hello"; 
		 }
	     }

          ==> 간결하게 구현 가능 :   @Controller  +  @ResponseBody ==> @RestController

		
            @RestController
	     public class MainController{

	         //JSON 응답
		 @GetMapping("/json1")
		 public String xxx(){

                     return "hello"; 
		 }

		 //JSON 응답
		 @GetMapping("/json2")
		 public String yyy(){

                     return "hello"; 
		 }
	     }

     3) 클라이언트에서 서버에 파라미터 전달
       
         -  SOAP는 URL이 아닌 Query String를 이용해서 데이터를 전달한다.
	    REST는 URL를 이용해서 데이터를 전달한다.

           가. SOAP 방식
	      - 만약 userid에 해당하는 1 값을 전달하고자 한다면 Query String을 주로 이용한다.	
               
	       http://localhost:8090/app/member?userid=1
	       http://localhost:8090/app/member?userid=2

              URL?  http://localhost:8090/app/member

	      - Controller 에서 @RequestParam 이용해서 값을 얻음.

	   나. REST 방식
	     - 만약 userid에 해당하는 1 값을 전달하고자 한다면

	       http://localhost:8090/app/member/1
	       http://localhost:8090/app/member/2

              URL?  http://localhost:8090/app/member/1
  	            http://localhost:8090/app/member/2

		    http://localhost:8090/app/member/값

	    - Controller 에서 @PathVariable 이용해서 값을 얻음.

3. REST 실습
  
   1) pom.xml

        <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>
 	 <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<scope>runtime</scope>
		<optional>true</optional>
	 </dependency>

   2) application.properties
    
        # 로그레벨 수정
	#logging.level.root=info

	#logging.level.org.springframework=info
	logging.level.com.exam=info

	# tomcat port 번호 변경
	server.port=8090

	# context명 변경
	server.servlet.context-path=/app


4.  lombok 라이브러리

   - DTO 작성시 생성자, getter/setter 메서드, toString 메서드 등을 자동으로 제공함.
   - 구현 방법

    1) lombok 라이브러리 다운로드
     
       https://projectlombok.org/download  에서 lombok.jar 다운

    2) pom.xml 의존성 설정
       https://mvnrepository.com/ 에서 lombok 검색.

          <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	</dependency>


    3) C:\Users\ssginc73 에 붙여넣고 실행하기 ( 실행중인 STS에게 lombok 설정)

        cmd창 열고 lombok.jar 실행

	java -jar lombok.jar

	specify location.. 선택하고 C:\springboot3_study\sts-4.27.0.RELEASE\SpringToolSuite4.exe 선택.

	install/update 버튼 클릭.

	install successful.. > Quit Installer 클릭

	STS 다시 시작

	maven > update project 클릭.

       
    4) DTO 작성

        @AllArgsConstructor    // 파라미터 있는 생성자
	@NoArgsConstructor     // 기본 생성자
	@Setter                // setter 메서드 
	@Getter                // getter 메서드
	@ToString              // toString 메서드
	@Slf4j                 // Logger 기능 제공.   log.info() 
	public class UserDTO {

		String username;
		int age;
		String address;
		
		
	}

     5) 빌더 패턴 ( Builder 패턴 )

        - DTO 생성시 사용되는 패턴임.

	예>
	   
		@Builder
		@Getter
		public class UserDTO2 {

			String username;
			int age;
			String address;
			
			
		}

		// 3. 빌더 패턴 (*************************)
		
		UserDTO2 dto = UserDTO2.builder()
				   .username("홍길동")
				   .age(20)
				   .address("서울")
			       .build();



 5. REST + MyBatis + MySQL

   1) 의존성

      <dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
 	 <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
	 </dependency>
	 <dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	</dependency>
	<dependency>
	    <groupId>org.mybatis.spring.boot</groupId>
	    <artifactId>mybatis-spring-boot-starter</artifactId>
	    <version>3.0.3</version>
	</dependency>
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
	</dependency>

   2) application.properties 4가지 정보 설정
    
        # 로그레벨 수정
	#logging.level.root=info

	#logging.level.org.springframework=info
	logging.level.com.exam=info

	# tomcat port 번호 변경
	server.port=8090

	# context명 변경
	server.servlet.context-path=/app

	# DB 연동
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/testdb
	spring.datasource.username=root
	spring.datasource.password=1234
	# DeptMapper 등록
	mybatis.mapper-locations=com/exam/config/*Mapper.xml
	# DTO 별칭
	mybatis.type-aliases-package=com.exam.dto

	#  SQL의 컬럼명: target_date   ,  DTO 변수명: targetDate  인 경우
	#  별칭 또는 resultMap 으로 명시적으로 설정해서 사용했음.
	#  이 작업을 자동으로 할 수 있다.
	mybatis.configuration.map-underscore-to-camel-case=true

	# // /** 설정시 적용
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher

	# LocatDate 사용시 날짜 포맷 지정. 4자리년도-2자리월-2자일 예> 2025-05-23
	spring.mvc.format.date=yyyy-MM-dd

    3) 테이블 작성

       use testdb;

       create table user( 
	   id int primary key,
	   username varchar(20) not null,
	   birthdate date
       );

       insert into user ( id, username, birthdate ) values ( 10, '홍길동', current_date() );
       insert into user ( id, username, birthdate ) values ( 20, '이순신', current_date() );
       insert into user ( id, username, birthdate ) values ( 30, '유관순', current_date() );
       commit;

      
    4) UserDTO.java 작성

        @AllArgsConstructor
	@NoArgsConstructor
	@Setter
	@Getter
	@ToString
	@Alias("UserDTO")
	public class UserDTO {

		 int id;
		 String username;
		 LocalDate birthdate;
		 
	}


   5) com.exam.mapper.UserMapper.xml  와  com.exam.mapper.UserMapper.java

       <mapper namespace="com.exam.mapper.UserMapper">
	   
	   <select id="findAll" resultType="UserDTO">
	       select id, username, birthdate
	       from user
	       order by id
	   </select>
		 
	</mapper>

	@Mapper
	public interface UserMapper {

		public List<UserDTO> findAll();
	}

    6) com.exam.service.UserService.java 와  com.exam.service.UserServiceImpl.java

        public interface UserService {

		public List<UserDTO> findAll();
	}

	@Service
	public class UserServiceImpl implements UserService {

		UserMapper mapper;
		
		public UserServiceImpl(UserMapper mapper) {
			this.mapper = mapper;
		}

		@Override
		public List<UserDTO> findAll() {
			return mapper.findAll();
		}

	}

     7) UserController.java  

      