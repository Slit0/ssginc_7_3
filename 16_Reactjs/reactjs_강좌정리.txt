Reactjs v18.2.0 강좌정리

1. 개요

  - facebook에서 제공하는 Front-end 프레임워크. ( JS 기반 )
    예> React.js, Vue.js , Angular(구글)


2. React 종류

  1) React.js (*)
     - 수업에서 배우는 내용
     - CSR( Client Side Rendering : 클라이언트인 웹브라우저에서 화면을 만들고 랜더링함. )

  2) Next.js
     - SSR ( Server Side Rendering: JSP처럼 서버에서 화면을 만들고 만든 화면을 클라이언트에게 전송해서 랜더링함 )

  3) React Native
     - 모바일용 어플리케이션 개발시 사용. ( 모바일용 React )

3. 환경설정
 
   1) node 설치

     http://nodejs.org
      
   2) VSC 설치 
    
      https://code.visualstudio.com/

   3) VSC 플러그인

     - live Server
     - Auto Rename Tag
     - Auto Close Tag
     - Reactjs Snippets ( 함수기반 컴포넌트 개발용 )

   4) 크롬에서 React 플러그인 설치


4. React 프로젝트 생성

    https://ko.legacy.reactjs.org/docs/create-a-new-react-app.html#createreact-app ( 18.2.0 해당 )
    https://ko.react.dev/ ( v19 )

   1) 문법

       npx create-react-app  프로젝트명

     가. 설치

	npm install npm -g  <== npm 최신버전 설치

        npx create-react-app my-app	

     나. 버전 변경

        - package.json 에서 다음과 같이 변경한다.

	 "react": "^19.0.0",        ==> "react": "^18.2.0"
         "react-dom": "^19.0.0",    ==> "react-dom": "^18.2.0"

	- 수정후 다시 다운로드 받기
	  cd my-app
	  npm install   <== package.json의 변경사항을 반영.
 
     다. 성능측정 코드 삭제

         src/index.js 에서 다음 코드 삭제하기

	 5라인의 import reportWebVitals from './reportWebVitals'; 삭제
	 17라인의 reportWebVitals(); 삭제

   
     라. 실행
        
	cd my-app
	npm start

	
	http://localhost:3000/ 요청되어 화면이 랜더링됨.

#############################################################################################

  5.  my-app 프로젝트 구조

      node_modules  :   maven의 의존성 저장 디렉터리인 .m2 역할
                       필요시 제거하고 나중에 npm install 명령어로 다시 다운로드가 가능함.

      public        :  웹브라우저인 클라이언트에서 접근이 가능
                      예>  http://localhost:3000/robots.txt

                       개발에 필요한 image는 public 에 저장하지 않음.
		    : index.html 파일이 메인 홈페이지 파일 ( 수정할 필요 없음)
		      실제 랜더링할 화면을 보여주는 template 역할담당.
      

      src           : private 특징 (   웹브라우저인 클라이언트에서 접근이 불가 )
		    : index.js 파일이 시작점 역할. ( 수정할 필요 없음)
		      <App /> 를 index.html의 id="root" 에 랜더링 함. 

		    : App.js 는 React 컴포넌트로서 함수형 컴포넌트로 작성되어 있음. 
		      반드시 첫글자는 대문자로 지정 필수.
		      이유는 <컴포넌트명 /> 형식으로 사용되어야 하기 때문에 일반 html과 구분 목적 )
		      예> <App />
		      이 파일에서 실제 화면을 구축하면 됨.

     package.json   : maven 의 pom.xml 역할
                      nodejs의 모듈 관리 설정 파일임.

		      예> npm install axios  실행하면 package.json에 "axios": "^1.7.9" 추가됨
		         npm uninstall axios 실행하면 제거됨.

    README.md       : 실행 명령어 가이드
                 
		    예> 실행 : npm start
		       배포  : npm run build


  6. Reactjs에 실행가능한 컴포넌트 작성 방법

    1) 클래스형 기반
      - 거의 사용 안함.
      - 초창기에는 클래스형 기반으로 개발함.
        이유는 클래스형에서 사용가능하나 함수형에서는 사용 못하는 기능들이 많았음.
	나중에 함수형에서도 사용가능하도록 기능을 추가했음.(hook 이라고 함. useXXX )

    2) 함수형 기반 (***********)

      가. 함수 선언 ( 반드시 첫글자는 대문자로 지정, 일반적인 html태그와 구별하기 위함. )

         // 함수선언식 ( 이름있는 함수)
         function Home(){   <=== 화면 전체 또는 화면의 일부분이 된다. MVC 에서 View 담당하는 역할임.

	 }
	 // 함수 표현식 ( 이름없는 함수, 익명함수)
         const Home = function (){

	 };

	 // arrow 
         const Home = ()=>{

	 };

      나. 함수안에서 화면을 구성(JSX)하고 return 해야 된다.

	 function Home(){

	    return (  <== () 생략가능한 경우는 JSX 한줄인 경우에 가능함.

		 JSX 문법 ( html 비슷)
	    );
	 }
       
      다. 외부에서 사용하기 위해서 export|export default 한다.

         export {Home}
	 export default Home

    
      라. CSS 스타일 지정은 컴포넌트당 하나씩 작성한다.
        
	 예> Home.js, Home.css  만들고 import './Home.css'; 사용함.
	    Menu.js, Menu.css  만들고 import './Menu.css'; 사용함.

     마. 사용할 때는 import 하고 <컴포넌트 /> 형식으로 사용함.
        예> <Home />
	   <Menu />


7. JSX

   1) 개요
     - JSX ( JavaScript XML)로서 Reactjs에서 UI구현시 사용됨.
     - JSX는 랜더링 되기 전에 작동 가능한 JS로 바뀐다. ( babel 도구, https://babeljs.io/ )
       결국은 JSX는 웹브라우저에서 실제 사용 불가능.

   2)문법
    
     - 함수형 컴포넌트에서 return ( JSX ) 표현식 이용.
       ()는 생략가능한데 JSX 한줄인 경우에 가능하다.
       예>  return <div className="bottom">bottom 화면입니다.</div>

   3)특징
     가.반드시 단 하나의 root 태그가 존재해야 된다. ( XML 문법 )
     나.일반 html태그에서는 종료태그가 없는 태그가 존재가능( 예> <hr> , <br> , <img> )
       하지만 JSP에서는 반드시 종료태그가 존재해야 됨.  ( 예> <hr></hr>, <br></br> )

     다. 함수형컴포넌트에서의 변수값을 JSX 에서 출력할 수 있다.
        문법: {변수값}  // JSP의 <%= 변수값 %> 동일한 기능
     
     라. {변수값} 에서 산술연산, 비교연산자, 논리 연산자, 3항연산자 등 모둑 가능
      
        예>  { age > 10 }
	    { age + 10 }
	    { age > 10 ? 값:값2 }
	    { age > 10 && age < 20 }

       단, 논리값(true/false), null, undefiend 는 {변수값} 사용시 출력안됨.
          출력할려면 {조건식?"true":"false"}
	          {조건식?"null":null}
    

     마. JSX에서 CSS 적용하는 방법 2가지

        a. className 속성
	   - 일반적인 html에서는 class 속성을 이용해서 스타일을 지정한다.
	     JSX에서는 class 값이 키워드이기 때문에 사용하지 못하고 대신 className 속성을 사용해야 된다.


	b. style 속성

           - 일반적인 html에서도 지원되는 속성.
	     JSX에서는 중첩 {{css속성명:속성값}} 사용해야된다.
	     예>
	        var xxx ={color:red}

		<p style={xxx} >
		<p style={{color:red}} >

            - 일반적인 html의 CSS 는 케밥표기법( 예> font-size:40px )사용하는데
	      JSX 의 CSS 는 카멜표기법 ( 예> fontSize: 40px ) 사용한다.
	      예> <p style={{color:'red', fontSize: '40px' }} >

    바. 조건부 랜더링 (******************)

      - 조건을 지정해서 true 인 경우에만 화면에 랜더링하자.
       문법: { true  && <보여줄컴포넌트> }

    
    사. spread 연산자

      문법: {...변수}

      예>
         원본코드:
         <img src="a.jpg" width="100" height="100" >
	 
	 spread 적용코드:
	 const attr ={src:"a.jpg", width:"100", height:"100">

	 JSX: <img {...attr} >

    아. JSX에서 이벤트처리시 이벤트 핸들러 속성은 반드시 카멜표기법을 사용해야된다.
        ( onClick, onChange, onSubmit, ... )

       예>
          기존 html 이벤트 처리: <button onclick="콜백함수">ok</button>

	  JSX 이벤트 처리: <button onClick="콜백함수">ok</button>

    자. JSX 주석

     문법: {/*  JSX   */}

    차. JSX에서 {json객체} 출력불가

 ////////////////////////////////////////////////////////////////////////////////////

  8. image 사용하기
 
    - public 폴더가 아닌 src 폴더에 저장하자.

      예> src/assets 에 이미지를 저장


    - 사용할때는 import 해서 사용한다. ( 권장 )

       예>
         import daum from './assets/daum.png'

	 <img src={daum} width="100" height="100" />


    - 이유는 public에 저장하면 npm run build 할때 누락이 자주 되기 때문이다.

  ==> 화면 레이아웃은 계층적인 구조로 만든다. ( JSP의 include 기능과 비슷 )
/////////////////////////////////////////////////////////////////

 9. props 
https://ko.reactjs.org/docs/components-and-props.html

   1) 개요
     - 계층적인 구조에서 부모컴포넌트에서 자식컴포넌트로 데이터를 전달하는 방법.  

   2) 특징
      - 단방향 ( 부모에서 자식으로만 전달 가능, 자식에서 부모로 데이터 전달은 불가능.)
      - 전달되는 데이터는 모든 데이터 가능 ( 논리값, 문자(열),숫자,함수,배열,json,... )
        전달하는 방법은 문자열 제외하고 {값} 형식을 사용해야된다.

   3) 구현방법1- 자식컴포넌트의 속성이용

      가. 부모 코드
	
	 문법: <자식컴포넌트  속성명=속성값  속성명=속성값 />

      나. 자식 코드
       
        - 자식코드에서는 함수 컴포넌트의 파라미터인 props로 부모에서 전달하는 데이터를 참조할 수 있다.
	  props 변수에는 {속성명:속성값, 속성명:속성값} 형식으로 전달됨
         function 자식컴포넌트(props){
		
		props.속성명 으로 참조
	 }


        - 자식코드에서는 함수 컴포넌트의 파라미터에서 직접 객체분해할당에서 데이터를 참조할 수 있다.

	  function 자식컴포넌트({속성명, 속성명}){}

    

    3) 구현방법2- 자식컴포넌트의 body 이용

        가. 부모 코드

            문법: <자식컴포넌트>
                    자식에게전달할데이터  <== 일반데이터값 또는 JSX 가능
	         </자식컴포넌트>


	 나. 자식 코드

	     - 자식코드에서는 함수 컴포넌트의 파라미터인 props로 부모에서 전달하는 데이터를 참조할 수 있다.
		 props 변수에는 {children:전달값} 형식으로 전달됨 

                 function 자식컴포넌트(props){
		 
		     props.children 참조
		 }

    3) 구현방법3 - 속성과 body 혼합

         가. 부모 코드
		
	      문법: <자식컴포넌트  속성명=속성값  속성명=속성값>
                    자식에게전달할데이터  <== 일반데이터값 또는 JSX 가능
	           </자식컴포넌트>
  

         나. 자식 코드

	   -자식코드에서는 함수 컴포넌트의 파라미터인 props로 부모에서 전달하는 데이터를 참조할 수 있다.
		 props 변수에는 {children:전달값, 속성명:속성값} 형식으로 전달됨 

                 function 자식컴포넌트(props){
		 
		     props.children 참조
		     props.속성명     참조
		 }

   ====> 계층구조가 많아지면 최상위 부모에서 최하위 자식에게 데이터를 전달하기 위한 방법이 복잡해질 수 있음.( props drilling 문제)
//////////////////////////////////////////////////////////////////////////////////////////////

10.  배열 데이터를 JSX에서 반복해서 출력하기.

  - JSX에서는 {json객체} 출력 불가
  - 반복처리시 개별적인 JSX태그를 구별하기 위한 unique 값을 설정해야 됨.
    key="unique값"
    이유는 React는 화면랜더링할 때 매번 똑같은 화면을 랜더링하지 않고
    수정된 항목만 랜더링한다. 이때 비교하기 위한 unique한 값이 필요함.

    예>
        // 반복할 배열 (원래는 서버에서 가져온 데이터임)
		const userList = [{username:"홍길동1",age:20},
		  {username:"홍길동2",age:30},
		  {username:"홍길동3",age:40}
		];

       
      {userList.map((ele,idx)=>{
        return <div key={idx}> {ele.username}, {ele.age}</div>
      })}

 //////////////////////////////////////////////////////////////////////////

11.  이벤트 처리
 
   https://ko.reactjs.org/docs/handling-events.html

   1) 이벤트 처리 함수는 컴포넌트 안에서 정의한다.

     예>
         function App(){  // 컴포넌트

	    //이벤트 함수
	    function handleEvent(){}
	    var handleEvent=function(){}
	    var handleEvent=()=>{}

	 }

   2) 이벤트 핸들러는 반드시 카멜표기법을 사용해야 된다.

     예> <button onClick=이벤트함수>

   
   3) 이벤트 함수 형식 2가지

    가. 콜백함수 형식 ( 함수명만 지정하는 방식임 )

     예> <button onClick={handleEvent}>

       - 임의의 파라미터값을 전달 불가
       - 자동으로 이벤트 객체가 전달됨.

	예>  
	    function handleEvent(e){
	      console.log("handleEvent", e)
	    }

	     <h2>1. 콜백 형식</h2>
             <button onClick={handleEvent}>OK1</button>

    나. arrow 함수 작성하고 직접 이벤트함수 호출 형식


     예> <button onClick={()=>handleEvent(}>

      - 임의의 파라미터값을 전달 가능
      - 자동으로 이벤트 객체가 전달안되기 때문에
        명시적으로 전달해야 된다.

     예>

        function handleEvent2(e, n){
         console.log("handleEvent2", e, n)
        }

	 <button onClick={(e)=>handleEvent2(e, 100)}>OK3</button>

/////////////////////////////////////////////////////////////////////////////
12. 계층적 이벤트 처리
 
   1)개념
    
     기본적으로 부모에서 자식으로만 데이터 전달이 가능하다. ( props 이용)
     계층적 이벤트를 사용하면 자식에서 부모에게 데이터 전달이 가능해짐. ( 이벤트함수 + props 이용 )

    예> 
        function App() {


	  //부모가 아닌 자식에서 호출
	  function handleEvent(n){
	 
	    console.log("handleEvent", n)
	  }

	  return (
	    <div className="App">
	      {/* 부모에서 자식에게 부모의 이벤트함수를 props로 전달함 */}
	      <Home onHandleEvent={handleEvent}/>
	    </div>
	  );

//////////////////////////////////////////////////////////////////

13. 상태관리-1 useState 이용 (***************) 

   1) 개요
     - 특정 컴포넌트에서 발생된 데이터인 상태값을 관리하는 방법임.
       일반적인 다음과 같은 변수형태로 데이터를 관리하지 않음.
        예>  var name = "홍길동";

   2) 문법

      import {useState} from 'react';

      const [변수명, set메서드명] = useState(초기값); // 훅(hook)

      예>  var name = "홍길동";  // 사용안함

         const [name, setName] = useState('홍길동');

    3) 특징
     
      - state 에 저장되는 데이터는 모든 데이터 가능 ( 문자열, 수치, 배열, JSON, 함수 )
      - state 값 변경은 직접 변수명="새로운값" 형식으로 사용하면 안되고
        반드시 set메서드로만 수정이 가능하다. (**********)
	props는 자식에서 수정이 불가(read only)
      - set메서드로 값이 변경되면 자동으로 화면이 재랜더링됨. (***************)
      - 모든 hook은 반드시 최상위 컴포넌트 함수에서만 사용이 가능하다. ( 조건문, 반복문, 이벤트함수내에서 사용불가)
      - state 값 JSX에서 출력은 {변수} 사용.
      - state에서 관리할 데이터가 만약 배열 또는 JSON이면 반드시 불변객체로 만들어야 된다.
        불변객체는 수정된 배열 또는 수정된 JSON 새로 만들어서 기존 배열 또는 JSON에 덮어쓰는 방식으로 
	처리함을 의미한다. (********************) 구현방법은 spread 연산자 이용
	 예> 
	    JSON
	    var y = { key:value};  // y는 100번지
	    var n_y = {...y, key:new값} // n_y  는 200번지
            var y = n_y            // 100번지에 새로운 200번지 할당해서 reactjs 가 변경되었음을 알수 있음.

	    배열
	    var x = [10,20,30];  // x는 100번지 
	    var n_x = [...x,40]  // n_x  는 200번지
	    var x = n_x;          // 100번지에 새로운 200번지 할당해서 reactjs 가 변경되었음을 알수 있음.

	  reactjs 코드
	  예>
	        //json 관리용 state 작성
		  const [user, setUser] = useState({username:'', age: 0})

		  //배열 관리용 state 작성
		  const [num, setNum] = useState([])


		  setNum([...num, 10])
		  setUser({...user, username:'홍길동', age: 20})
    
    4) set메서드

       문법1:  set메서드(변경값)
            예> setNum(num+1);
	       setNum(num>0?num-1:0); // 3항연산자
	    
	    - 배치로 실행됨. 따라서 num값은 한번만 변경됨
              setNum(num+1);
	      setNum(num+1);
       
       문법2:  set메서드(arrow함수)

            예> setNum(변수=>리턴값)
	       
	       setNum(num=>num+1)

	   -  arrow 함수 지정 :  매번 실행됨. 따라서 num값은 두번 변경됨
		setNum(num=>num-1); // arrow 함수
		setNum(num=>num-1); // arrow 함수	

    
     5) state 이용한 조건문 랜더링 방법

          // 버튼 클릭 여부 저장하는 state 생성
          const [isShow, setIsShow] = useState(true)

	  function handleEvent(){
	    //  setIsShow(!isShow) // OLD 방법
	      setIsShow(isShow=>!isShow); // 논리값 수정은 arrow 함수 권장함.
	  }

	  <h2>state 이용한 조건부 랜더링3- && 연산자 이용(권장방법)</h2>
          {isShow && <><Home/></> }
          <button onClick={handleEvent}>{isShow?'감추기':'보여주기'}</button>


    6) state 와 input 처리
     
       - state값을 input태그의 value={state} 형식으로 지정한 경우에는 반드시 onChange 이벤트를 구현해서
         사용자가 입력한 input 태그값을 set메서드 로 state를 수정해야 된다. (***************)

       - 이유는 기본적으로 <input> 태그의 입력값은 html의 value 속성이 관리함.
         현재는 value={state} 만 지정했기 때문에 state값이 변경이 안됨. 즉 value속성값과 state값이 동기화가 안된 상태이기
	 때문에 input 태그에 입력이 안됨.
	 onChanage로 value속성값과 state값이 동기화 해주면 해결됨.

	예>

	    //userid 와 passwd 관리할 state 작성
            const [userid, setUserid] = useState('')
            const [passwd, setPasswd] = useState('')

	     function handleChange(e){
		    // value값과 state 동기화
		    console.log(e.target.value)
		    setUserid(e.target.value)
	     }	

	    <form onSubmit={handleEvent}>
		아이디:<input type="text" name="userid" value={userid} onChange={handleChange}/> <br></br>
		비번:<input type="text" name="passwd" value={passwd} onChange={handleChange2}/> <br></br>
		<button>로그인</button>
	    </form>


13. 상태관리-2 useReducer 이용

     1) 개요
      - useState와 동일하게 상태관리 기능을 가짐.
      - state 보다 좀더 구조화된 방식으로 state 관리

    
     2) 문법
      
         import {useReducer}  from 'react'

	 const [state, dispatch] = useReducer(reducer, 초기값 );

	 state : 상태값 저장

	 dispatch: 실제 state를 변경하는 함수를 요청하는 위임함수.
		   dispatch({type:'UP'})
		   dispatch({type:'DOWN', payload:전달값})
		   호출하면 reducer 실행된다.
		   이벤트 함수에서 dispatch 함수를 호출한다.
		   예>
		     function handleEvent(){
			dispatch({type:'UP'})
		     }

	 reducer: 상태값을 실제로 변경하는 함수.
	          변경된 state값을 반드시 리턴.

		  예>
		    function reducer(state, action){
			if(action.type === 'UP'){
			   action.payload
			   return state+1
			}
			if(action.type === 'DOWN'){
			   return state-1
			}
		    }

   
////////////////////////////////////////////////////////////////////////////

14. useRef1- 기본

 https://ko.reactjs.org/docs/hooks-reference.html#useref

  1) 개요
    - JSX의 특정 태그를 참조하는 기능. ( 일반적인 데이터를 저장하는 역할도 가능 )
     예> <input> 

  2) 문법
   
    가. import
      
       import {useRef} from 'react'

    나. useRef 생성

        const 참조변수 = useRef(기본값)

    다. JSX 태그에 설정

       <input ref={참조변수} />

    마. 컴포넌트에서 JSX태그 접근 방법

        참조변수.current
	참조변수.current.value

14. useRef2-  forwardRef() 사용

  https://ko.legacy.reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components

   1) 개요
    
    부모컴포넌트에서 자식컴포넌트에게 ref 설정해서 참조가능.
    이때 자식컴포넌트에서 반드시  forwardRef(자식함수컴포넌트) 해야된다.
     예>
         function App(){

	   return(
	      <Home ref={child_ref} username="홍길동" age={20}  /> <== ref 속성은 props 로 전달안됨.
	                                                             개별적으로 ref 를 전달받아야 된다.
	   )

    2) 문법 ( 익명함수 또는 arrow 함수)

       //forwardRef 적용안된 ref가 없는 기존 자식 컴포넌트 ( ref 속성 전달 불가)
	const Home = function(props){}
	const Home = (props)=>{}


	//forwardRef 적용된 ref가 있는 자식 컴포넌트
	const Home = forwardRef(function(props,ref){})

	const Home = forwardRef((props,ref)=>{})


14. useRef3-   useImperativeHandle() 사용

 https://ko.legacy.reactjs.org/docs/hooks-reference.html#useimperativehandle


     1) 개요
       - 부모컴포넌트에서 자식컴포넌트의 함수를 호출할 수 있는 기능
       - forwardRef() 안에서 사용됨.

     2) 문법
       import {forwardRef, useImperativeHandle} from 'react' 

       const Home = forwardRef(function(props,ref){
       
	    //자식 함수
	    function open(){}  <== 부모인 App에서 호출
            function open2(){}

	    // useImperativeHandle() 이용해서 부모에서 호출할 수 있는 함수 등록
	   useImperativeHandle(ref,()=>({open,open2}))	
       })

       // 자식호출 방법
       home_ref.current.open();


14. useRef4- 모달창

        import logo from './logo.svg';
	import './App.css';

	import {forwardRef, useRef, useImperativeHandle} from 'react'

	//자식
	const Child = forwardRef(function(props, ref){

	  // modal을 보여주는 자식함수(App의 handleEvent가 호출할 예정)
	  function modal_show(){
	    modal_dialog.current.showModal()
	  }

	  // 자식함수 등록
	  useImperativeHandle(ref,()=>({modal_show}));

	  //modal 참조하는 ref 작성
	  const modal_dialog = useRef(null)

	  return(
	    <>
	       <dialog ref={modal_dialog} >
		<p>Greetings, one and all!</p>
		<form method="dialog">
		  <button>OK</button>
		  <button>close</button>
		</form>
	      </dialog> 
	    </>
	  );
	});

	// 부모
	function App() {
	  const modal_ref = useRef(null)

	  function handleEvent(){
	    modal_ref.current.modal_show()
	  }

	  return (
	    <div className="App">
	    <button onClick={handleEvent}>모달열기</button>
	      <Child ref={modal_ref}/>
	    </div>
	  );
	}

	export default App;


///////////////////////////////////////////////////////////////////

15. Context API

  1) 개요
   - 깊이가 있는 계층구조인 경우 최상의 부모에서 최하의 자식에게 
     데이터 전달을 props로 한다면 여러번 중간 자식들을 거치게 된다.
     매우 비효율적임. 해결: Context API

     예> App  <== <UserContext.Provider value>	 
                    <Home />
		 </UserContext.Provider>
          Home <== username  사용
	   
	    Menu  <== sayEcho 사용
	       
	        MenuItem

  2) 특징
    - 원하는 하위 컴포넌트에서 직접 데이터 사용할 수 있다.

  3) 구현

    가. 데이터 저장하는 역할
 https://react.dev/reference/react/createContext 


    나. 데이터를 사용하는 역할
 https://react.dev/reference/react/useContext 


  4) 데이터 저장하는 역할 패턴

    가. 저장소 생성 ( 외부파일로 작성)
	
	# store/UserContext.js

        import { createContext } from 'react';

	const 첫글자대문자식별자 = createContext(기본값)

           //( 첫글자는 반드시 대문자, <컨텍스트명 /> 태그 형식으로 사용됨)
      예>  const UserContext = createContext({
           username:'', 
	   sayEcho:()=>{}  // 함수도 저장가능
	  })

	
          export default UserContext;


    나.  생성된 UserContext의 Provider 제공

         export function  UserContextProvider({children}){

	    //createContext에서 생성된 JSON 데이터관리
	     const [ username, setUserName] = useState('홍길동');
	
	   //createContext에서 생성된 함수 구현 ( 일반적인 구현은 state값 변경작업이 될 것이다. )
	    function sayEcho(){}

	    //최종적으로 JSON데이터와 함수를 저장
	    const userCtx = {
	        username:username
		sayEcho:sayEcho

	    }		
	    return <UserContext.Provider value={userCtx}>
		      {children}
	           </UserContext.Provider> 
	 }


	// 기존 사용
	<UserContext.Provider value>	 
                    <Home />
	</UserContext.Provider>

	//변경된 사용
	<UserContextProvider>
           <Home />
	</UserContextProvider>


    다. App.js에서 UserContextProvider 설정
       import { UserContextProvider } from './store/UserContext';

        <UserContextProvider>
           <Home />        <== Home 및 Home 하위 컴포넌트들은 직접 createContext에서 생성한 username과 sayEcho사용가능
	</UserContextProvider>


   5) 사용하는 쪽 패턴

       import UserContext from "../store/UserContext";

        const userCtx = useContext(UserContext)
////////////////////////////////////////////////////////////////////////
추가작업

1. src/UserContext.js 에서 useState 관리를 useReducer로 변경
2. 이름:<input type="text" name="username" ref={input_ref}/> <br></br>
   나이:<input type="text" name="age" /> <br></br>

////////////////////////////////////////////////////////////////////////

16.  useEffect 
https://ko.reactjs.org/docs/hooks-effect.html
   1)개요
    - 부수효과(side effect) 처리 담당.
    - 기본적인 프로세스에 영향을 미치지 않는 특별한 기능을 담당.
      예> 서버연동( fetch API,  axios )
    - 실제컴포넌트가 모두 랜더링되고 이후에 useEffect가 실행됨.
    
   2)문법

    import { useEffect } from 'react';

    useEffect(부수함수,[]|[값])


    부수함수: return 문을 가질수 있음. 역할은 clean-up 작업 처리.
    *의존성 배열에 따른 부수함수의 실행여부가 결정됨.
    [] 없는 경우: 컴포넌트가 재랜더링될 때 매번 부수함수가 실행됨.
    [] 빈 배열:  맨 처음 한번만 실해됨
    [값,..] 배열: 지정된 값이 변경된 경우에만 부수함수가 다시 실행됨. 
                일반적으로 state 또는 부수함수의 로컬변수값임

   3) clean-up 기능

    - 부수함수에서 return 문을 사용하여 clean-up 기능 구현 가능
    - useEffect가 맨 처음 실행될때는 실행안됨.
      두번째부터 실행이 된다. 따라서 의존성배열은 [] 비어있는 배열이면 안된다.

////////////////////////////////////////////////////////////////////////////

17. 서버연동1- fetch API 이용
https://developer.mozilla.org/ko/docs/Web/API/Window/fetch
https://developer.mozilla.org/ko/docs/Web/API/Fetch_API

    1) 문법
     
      const reseponse = fetch( url, {method:'get', headers:{'Content-Type':'application/json',..}} );

    2) 구현

      가. api/httpService.js 
      



17. 서버연동2- axios API 이용
   
   https://axios-http.com/kr/

    1)설치
     
     npm install axios  <== my-app 프로젝트안에서 실행, 
                            package.json 에서 "axios": "^1.7.9" 확인 가능

     <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

	
     - fetch 는 응답에 데이터를 response.json() 메서드를 명시적으로 사용해야 된다.
       axios 는 자동으로 JSON으로 변환해서 반환한다.

    2) 사용

     가. import 

        import axios from 'axios'


     나. 문법

      GET  방식:
       
        const response = await axios.get('/user?ID=12345'); 
	const response = await axios.get('/user',{
						   params:{
						     ID:12345
						   }
 	                                          }); 
	const response = await axios({
			  method: 'get',
			  url: '/user?ID=12345'
			})

	
	POST (PUT) 방식:
	  
	 const response  =await axios({
				  method: 'post',
				  url: '/user/12345',
				  data: {
				    firstName: 'Fred',
				    lastName: 'Flintstone'
				  },
				  headers:{
				    'Content-Type':'application/json'	
				  }
				});


	const response = await axios.post('/user/12345', {
				    firstName: 'Fred',
				    lastName: 'Flintstone'
				  },{
				       headers:{
					  'Content-Type':'application/json'	
				        }	
				     }
				  )

    DELETE  방식:
       
        const response = await axios.delete('/user?ID=12345'); 
	const response = await axios.delete('/user',{
						   params:{
						     ID:12345
						   }
 	                                          }); 
	const response = await axios({
			  method: 'delete',
			  url: '/user?ID=12345'
			})

    3) axios 인스턴스
     
      - 중복되는 URL 값 또는 파라미터, header 값들을 미리 설정해놓고 참조해서 사용하는 방식.

      예>
           // 설정
             const instance = axios.create({
		  baseURL: 'https://reqres.in/api',
		  timeout: 1000,
		  headers: {'Content-Type':'application/json'}
		});


           // 사용
	    const response = await instance({methdo:'get', url:`/users?page=${n}`})

   4) interceptor

      const instance = axios.create({
		  baseURL: 'https://reqres.in/api',
		  timeout: 1000,
		  headers: {'Content-Type':'application/json'}
		});

    // 요청 인터셉터 추가하기
	instance.interceptors.request.use(function (config) {
	    // 요청이 전달되기 전에 작업 수행

	    return config;
	  }, function (error) {
	    // 요청 오류가 있는 작업 수행
	    return Promise.reject(error);
	  });

	// 응답 인터셉터 추가하기
	instance.interceptors.response.use(function (response) {
	    // 2xx 범위에 있는 상태 코드는 이 함수를 트리거 합니다.
	    // 응답 데이터가 있는 작업 수행
	    return response;
	  }, function (error) {
	    // 2xx 외의 범위에 있는 상태 코드는 이 함수를 트리거 합니다.
	    // 응답 오류가 있는 작업 수행
	    return Promise.reject(error);
	  });

/////////////////////////////////////////////////////////////////////////////

18. 라우팅

  1)개요

    메뉴:      로그인 회원가입
             ------------


  2) 설치

   https://reactrouter.com/6.29.0 

   npm install react-router-dom@6.29.0

   package.json에 "react-router-dom": "^6.29.0" 추가됨.

  
  3)기본적인 라우팅 구조 작업

    # Main.js

	import {createBrowserRouter,RouterProvider} from "react-router-dom";

	const router = createBrowserRouter([
	  {
	    path: "/",  // http://localhost:3000/
	    element: <div>Home 컴포넌트입니다.</div>
	    
	  },
	  {
	    path: "/signup", // http://localhost:3000/signup
	    element: <div>Signup 컴포넌트입니다</div>,
	  },
	]);

	function Main() {
	  return (
	    <RouterProvider router={router} />
	  );
	}

	export default Main;


   4) 컴포넌트간 연결 방법

     가. <a href="">
        - 전체 페이지가 새롭게 로딩되기 때문에 네트워크 동작이 발생됨.


     나. <Link to="">
        - 내부적으로 화면이 새롭게 랜더링 되기 때문에 네트워크 동작이 발생 안됨. 
	  성능적으로 우수.

	- 필요시 타겟 컴포넌트에서 파라미터 전달 가능.
	  <Link to="/signup" state={{username:'홍길동'}}>

	  타겟 컴포넌트에서는 다음과 같이 useLocation() 이용하여 참조가능.
	  const {state} =  useLocation();


   5) 메뉴 역할의 컴폰넌트 작성 
     
     https://reactrouter.com/en/main/start/tutorial#nested-routes


      # pages/RootLayout.js

	function RootLayout(){

	    return(
		<>
		<div>
		    <Link to="/">Home</Link>
		    <Link to="/signup">signup</Link>
		</div>
	    <hr/>
		<div id="detail">
		     <Outlet />
		</div>
		</>
	    )
	}
	export default RootLayout;

      
      # Main.js

         const router = createBrowserRouter([
		  {
		    path:"/",
		    element:<RootLayout/>,
		    children:[
		      {
			path: "/",  // http://localhost:3000/
			element: <Home />
			
		      },
		      {
			path: "/signup", // http://localhost:3000/signup
			element: <Signup />,
			
		      },
		    ]
		  }
		]);


   6) 404 예외처리
https://reactrouter.com/en/main/start/tutorial#handling-not-found-errors
     - 기본적으로 404 예외발생시 다음과 같은 메시지가 출력된다.
        Unexpected Application Error!
	404 Not Found

     - 필요시 예외처리 페이지를 구현할 수 있음.

      # ErrorPage.js

                import { useRouteError,Link } from "react-router-dom";
		import MenuNavigation from "../components/MenuNavigation";
		function ErrorPage(){
		    const error = useRouteError();
		    console.error(error);
		  
		    return (
		      <div id="error-page">
			  <MenuNavigation />
			<hr/>
			<h1>404에러</h1>
			<p>요청한 경로는 존재하지 않는 url경로입니다. 확인하세요</p>
			<p>
			  <i>{error.statusText || error.message}</i>
			</p>
		      </div>
		    );
		}
		export default ErrorPage;


      # Main.js

           {
	    path:"/",
	    element:<RootLayout/>,
	    errorElement:<ErrorPage />,
	    children:[

 7) 링크 적용하기 위한 방법 3가지

   가. <a href="">
   나. <Link to="">
      - 사용자에게 피드백 제공 안됨.
  
   다. <NavLink to="">
   https://reactrouter.com/6.29.0/components/nav-link
      - 사용자에게 피드백 제공됨.
      - 자동으로 다음과 같이 className이 설정된다.

        <NavLink to=""> ==> <NavLink to="" className="active">

      - 필요시 커스텀 css 설정도 가능하다.

         # css 

	    .active{
		    color:red
		}

		.menu{
		    color:red;
		    background-color: yellow;
		}

	 # <NavLink> 설정
	   
	       <div>
		    <NavLink to="/" className={({isActive})=>isActive?'menu':undefined}>Home</NavLink>
		    <NavLink to="/signup" className={({isActive})=>isActive?'menu':undefined}>signup</NavLink>
		    <NavLink to="/login"className={({isActive})=>isActive?'menu':undefined}>login</NavLink>
		</div>


   8) 링크 적용 - 프로그래밍 이용

     https://reactrouter.com/6.29.0/hooks/use-navigate

      Home --> Login

    - 구현방법
      
      import { useNavigate } from "react-router-dom";

      const navigate = useNavigate();

      navigate(경로);
      navigate(경로,  { state: { key: value } }); <== <Link>와 동일하게  useLocation() 이용해서 참조 가능.

    
   9) 동적라우팅 ( 파라미터 전송 방법 )

      가.  url 포함하여 전송 ( path variable )
         예>  /users/2, /users/1
https://reactrouter.com/6.29.0/hooks/use-params
          - useParams() 이용

          Spring :  @GetMappring("/users/{id}") <== @PathVariable Long id
	  ReactJS:  path:'/users/:id'           <== useParams() 이용
 
	  Spring :  @GetMappring("/users/{id}/{email}") <== @PathVariable Long id
	  ReactJS:  path:'/users/:id/:email'           <== useParams() 이용


	    const xxx = useParams(); // {id: '1'}
            const {id} = useParams(); // 

      나. query string 전송
         예>  /products?id=2

          - useSearchParams() 이용

             let [searchParams, setSearchParams] = useSearchParams();
		console.log(searchParams)
	   var userid = searchParams.get("userid")


  10) useParams() 방식에서의 <Link to=""  relative="route|path"> 차이점
  https://reactrouter.com/6.29.0/components/link#relative


     # 현재 경로는 다음과 같다.
      http://localhost:3000/cart/P2   

       현재route(경로): cart/P2  한개임
       현재path(경로):  cart 와  P2  2개임
                 

      <Link to=".." relative="route">뒤로</Link>  http://localhost:3000/

      <Link to=".." relative="path">뒤로</Link>   http://localhost:3000/cart

   

  11) loader 함수 
  https://reactrouter.com/6.29.0/route/loader

     가. 문법
       
        {
	   path:'',
	   element:<Home/>,
	   loader: 함수
	}

	==> Home 컴포넌트가 생성되기 전에 loader함수가 실행되어 서버와 연동해서 데이터를 가져와서 리턴함.
	    리턴한 데이터를 Home 컴포넌트가 생성될때 참조 가능.
	==> Home 컴포넌트에서 다음과 같이 useLoaderData() 이용해서 참조할 수 있다.
	   const data = useLoaderData();

     나. 예외처리
       - loader에서 발생된 예외는 errorElement:ErrorPage 가 담당.
       - 기존에 예외처리했던 다음 코드는 수정할 것이다.
          throw new Error("fetchUserList 예외발생")      // 예외 정보가 빈약

	  throw new Response("예외 메시지", {status:500}) // 부족한 예외정보 추가
	  
	  실제 ErrorPage에서는 Response객체에 담긴 status 값을 비교해서 적합한 예외메시지를 출력가능.

	    function ErrorPage(){
	    const error = useRouteError();
	    console.error(error); 
	  
	    let message = "의도하지 에러";
	    let status = 404;

	    if(error.status === 404){
	      status = 404;
	      message = error.data;
	    }

	    if(error.status === 500){
	      status = 500;
	      message = error.data;
	    }

   다. loader에게 파라미터 전달 가능 

      a. path variable
        
	  // /usersParam/2 요청시 2값이 params 파라미터로 전달됨
		async function users_loader2({params}){
		  console.log("users_loader2:", params) // {id: '1'}
		  const resonse = await fetchUserList(params.id);

		  return resonse;
		}

      b. query string 

         // usersQueryString?id=2 요청시 2값이 request 파라미터로 전달됨
		async function users_loader3({request}){
		  console.log("users_loader3:", request) //
		  const url = new URL(request.url);
		  const id = url.searchParams.get("id");
		  const resonse = await fetchUserList(id);

		  return resonse;
		}
  

  12) action 함수
https://reactrouter.com/6.29.0/route/action

     1) 기능
       
       - form태그의 사용자입력데이터를 서브밋해줌.

       - 사용자 입력폼 작성시 반드시 <Form > 이고  method="post" 지정해야 됨. ( <form> 안됨  )

       - action 함수에 사용자입력데이터를 참조하는 방법

          const formData =   request.formData()

	  var userid = formData.get("userid");